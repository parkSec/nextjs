'use strict';

var slate = require('slate');
var getCharacter = require('../utils/get-character.js');
var getMatchRange = require('../utils/get-match-range.js');
var isEmptyString = require('../utils/is-empty-string.js');
var isSelectionCollapsed = require('../utils/is-selection-collapsed.js');

const formatters = [
  {
    type: "mark",
    mark: "bold",
    character: "*"
  },
  {
    type: "mark",
    mark: "italic",
    character: "_"
  },
  {
    type: "mark",
    mark: "strikethrough",
    character: "~"
  },
  {
    type: "mark",
    mark: "code",
    character: "`"
  }
];
const markFormattingCharacters = formatters.filter((formatter) => formatter.type === "mark").map((formatter) => formatter.character);
function formatMark(editor, text, formatter) {
  if (text !== formatter.character) {
    return false;
  }
  const match = getMatchRange.getMatchRange(editor, editor.selection, [formatter.character]);
  if (!match || slate.Range.isCollapsed(match)) {
    return false;
  }
  const formattingCharacter = getCharacter.getCharacterBefore(editor, match);
  if (!formattingCharacter || formattingCharacter.text !== formatter.character) {
    return false;
  }
  const beforeCharacter = getCharacter.getCharacterBefore(editor, formattingCharacter.range);
  if (beforeCharacter && !markFormattingCharacters.includes(beforeCharacter.text) && !isEmptyString.isEmptyString(beforeCharacter.text)) {
    return false;
  }
  const matchText = slate.Editor.string(editor, match);
  if (matchText.trim() !== matchText) {
    return false;
  }
  slate.Transforms.select(editor, match);
  editor.addMark(formatter.mark, true);
  slate.Transforms.collapse(editor, { edge: "end" });
  editor.removeMark(formatter.mark);
  slate.Transforms.delete(editor, {
    at: formattingCharacter.range
  });
  return true;
}
function withAutoFormatting(editor) {
  const { insertText } = editor;
  editor.insertText = (text, options) => {
    if (!isSelectionCollapsed.isSelectionCollapsed(editor.selection)) {
      return insertText(text, options);
    }
    let shouldInsertText = true;
    for (const formatter of formatters) {
      if (formatter.type === "mark") {
        if (formatMark(editor, text, formatter)) {
          shouldInsertText = false;
        }
      }
    }
    if (shouldInsertText) {
      insertText(text, options);
    }
  };
  return editor;
}

exports.withAutoFormatting = withAutoFormatting;
//# sourceMappingURL=auto-formatting.js.map
