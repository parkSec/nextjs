'use strict';

var slate = require('slate');
var slateHyperscript = require('slate-hyperscript');

function areUrlsEqual(a, b) {
  try {
    const urlA = new URL(a);
    const urlB = new URL(b);
    return urlA.origin === urlB.origin && urlA.pathname === urlB.pathname;
  } catch {
    return false;
  }
}
const createParagraphElement = () => ({
  type: "paragraph"
});
const ELEMENT_TAGS = {
  A: (element) => {
    const href = element.getAttribute("href");
    const innerText = element.innerText;
    return {
      type: href && areUrlsEqual(href, innerText) ? "auto-link" : "custom-link",
      url: href ?? ""
    };
  },
  P: createParagraphElement,
  BLOCKQUOTE: createParagraphElement,
  H1: createParagraphElement,
  H2: createParagraphElement,
  H3: createParagraphElement,
  H4: createParagraphElement,
  H5: createParagraphElement,
  H6: createParagraphElement,
  LI: createParagraphElement
};
const TEXT_TAGS = {
  CODE: () => ({ code: true }),
  DEL: () => ({ strikethrough: true }),
  EM: () => ({ italic: true }),
  I: () => ({ italic: true }),
  S: () => ({ strikethrough: true }),
  STRONG: () => ({ bold: true })
};
function flattenListItems(node) {
  const listItems = [];
  if (node.nodeName === "LI") {
    listItems.push(node);
  }
  node.childNodes.forEach((child) => {
    if (child.nodeType === 1) {
      listItems.push(...flattenListItems(child));
    }
  });
  return listItems;
}
function deserialize(node) {
  if (node.nodeType === 3) {
    return node.textContent;
  } else if (node.nodeType !== 1) {
    return null;
  } else if (node.nodeName === "BR") {
    return "\n";
  }
  const childNodes = Array.from(node.childNodes);
  let children = childNodes.map(deserialize).flat();
  if (node.nodeName === "UL" || node.nodeName === "OL") {
    const listItems = flattenListItems(node);
    children = listItems.map((li) => deserialize(li)).flat();
  }
  if (children.length === 0) {
    children = [{ text: "" }];
  }
  if (node.nodeName === "BODY") {
    return slateHyperscript.jsx("fragment", {}, children);
  }
  if (ELEMENT_TAGS[node.nodeName]) {
    const attrs = ELEMENT_TAGS[node.nodeName](node);
    return slateHyperscript.jsx("element", attrs, children);
  }
  if (TEXT_TAGS[node.nodeName]) {
    const attrs = TEXT_TAGS[node.nodeName](node);
    return children.map((child) => slateHyperscript.jsx("text", attrs, child));
  }
  return children;
}
function withPasteHtml(editor) {
  const { insertData } = editor;
  editor.insertData = (data) => {
    const html = data.getData("text/html");
    if (html) {
      const parsed = new DOMParser().parseFromString(html, "text/html");
      const fragment = deserialize(parsed.body);
      if (fragment !== null && Array.isArray(fragment)) {
        slate.Transforms.insertFragment(editor, fragment);
        return;
      }
    }
    insertData(data);
  };
  return editor;
}

exports.withPasteHtml = withPasteHtml;
//# sourceMappingURL=paste-html.js.map
