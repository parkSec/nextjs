{"version":3,"file":"custom-links.mjs","sources":["../../../src/slate/plugins/custom-links.ts"],"sourcesContent":["import type { Editor } from \"slate\";\nimport { Element, Node, Range, Transforms } from \"slate\";\n\nimport type { ComposerBodyCustomLink } from \"../../types\";\nimport { isPlainText, isText } from \"../utils/is-text\";\nimport { selectionContainsInlines } from \"../utils/selection-contains-inlines\";\n\nfunction isUrl(string: string) {\n  try {\n    new URL(string);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport function withCustomLinks(editor: Editor): Editor {\n  const { isInline, normalizeNode, insertData } = editor;\n\n  editor.isInline = (element) => {\n    return element.type === \"custom-link\" ? true : isInline(element);\n  };\n\n  editor.normalizeNode = (entry) => {\n    const [node, path] = entry;\n\n    if (isText(node)) {\n      const parentNode = Node.parent(editor, path);\n\n      // Prevent rich text within custom links by removing all marks of inner text nodes\n      if (isComposerBodyCustomLink(parentNode)) {\n        if (!isPlainText(node)) {\n          const marks = Object.keys(node).filter((key) => key !== \"text\");\n\n          Transforms.unsetNodes(editor, marks, { at: path });\n        }\n      }\n    }\n\n    normalizeNode(entry);\n  };\n\n  // Create custom links when pasting URLs while some text is selected\n  editor.insertData = (data) => {\n    const { selection } = editor;\n    const pastedText = data.getData(\"text/plain\");\n\n    // Keep track of whether the default behavior should be invoked\n    // This allows us to sequence multiple conditions in a performant way,\n    // ordering them by likelihood/cost and stopping early whenever possible\n    let shouldInvokeDefaultBehavior = true;\n\n    // Check if the selection is a range\n    if (selection && !Range.isCollapsed(selection)) {\n      // Check if the selection is contained in a single block\n      if (selection.anchor.path[0] === selection.focus.path[0]) {\n        // Check if the pasted text is a valid URL\n        if (isUrl(pastedText)) {\n          // Check if the selection only contains (rich and/or plain) text nodes\n          if (!selectionContainsInlines(editor, (node) => !isText(node))) {\n            // If all conditions are met, wrap the selected nodes in a custom link\n            Transforms.wrapNodes<ComposerBodyCustomLink>(\n              editor,\n              {\n                type: \"custom-link\",\n                url: pastedText,\n                children: [],\n              },\n              {\n                at: selection,\n                split: true,\n                match: isPlainText,\n              }\n            );\n            shouldInvokeDefaultBehavior = false;\n          }\n        }\n      }\n    }\n\n    if (shouldInvokeDefaultBehavior) {\n      insertData(data);\n    }\n  };\n\n  return editor;\n}\n\nexport function isComposerBodyCustomLink(\n  node: Node\n): node is ComposerBodyCustomLink {\n  return Element.isElement(node) && node.type === \"custom-link\";\n}\n"],"names":[],"mappings":";;;;AAOA,SAAS,MAAM,MAAgB,EAAA;AAC7B,EAAI,IAAA;AACF,IAAA,IAAI,IAAI,MAAM,CAAA,CAAA;AACd,IAAO,OAAA,IAAA,CAAA;AAAA,WACA,CAAP,EAAA;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACF,CAAA;AAEO,SAAS,gBAAgB,MAAwB,EAAA;AACtD,EAAA,MAAM,EAAE,QAAA,EAAU,aAAe,EAAA,UAAA,EAAe,GAAA,MAAA,CAAA;AAEhD,EAAO,MAAA,CAAA,QAAA,GAAW,CAAC,OAAY,KAAA;AAC7B,IAAA,OAAO,OAAQ,CAAA,IAAA,KAAS,aAAgB,GAAA,IAAA,GAAO,SAAS,OAAO,CAAA,CAAA;AAAA,GACjE,CAAA;AAEA,EAAO,MAAA,CAAA,aAAA,GAAgB,CAAC,KAAU,KAAA;AAChC,IAAM,MAAA,CAAC,IAAM,EAAA,IAAI,CAAI,GAAA,KAAA,CAAA;AAErB,IAAI,IAAA,MAAA,CAAO,IAAI,CAAG,EAAA;AAChB,MAAA,MAAM,UAAa,GAAA,IAAA,CAAK,MAAO,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;AAG3C,MAAI,IAAA,wBAAA,CAAyB,UAAU,CAAG,EAAA;AACxC,QAAI,IAAA,CAAC,WAAY,CAAA,IAAI,CAAG,EAAA;AACtB,UAAM,MAAA,KAAA,GAAQ,OAAO,IAAK,CAAA,IAAI,EAAE,MAAO,CAAA,CAAC,GAAQ,KAAA,GAAA,KAAQ,MAAM,CAAA,CAAA;AAE9D,UAAA,UAAA,CAAW,WAAW,MAAQ,EAAA,KAAA,EAAO,EAAE,EAAA,EAAI,MAAM,CAAA,CAAA;AAAA,SACnD;AAAA,OACF;AAAA,KACF;AAEA,IAAA,aAAA,CAAc,KAAK,CAAA,CAAA;AAAA,GACrB,CAAA;AAGA,EAAO,MAAA,CAAA,UAAA,GAAa,CAAC,IAAS,KAAA;AAC5B,IAAM,MAAA,EAAE,WAAc,GAAA,MAAA,CAAA;AACtB,IAAM,MAAA,UAAA,GAAa,IAAK,CAAA,OAAA,CAAQ,YAAY,CAAA,CAAA;AAK5C,IAAA,IAAI,2BAA8B,GAAA,IAAA,CAAA;AAGlC,IAAA,IAAI,SAAa,IAAA,CAAC,KAAM,CAAA,WAAA,CAAY,SAAS,CAAG,EAAA;AAE9C,MAAA,IAAI,UAAU,MAAO,CAAA,IAAA,CAAK,OAAO,SAAU,CAAA,KAAA,CAAM,KAAK,CAAI,CAAA,EAAA;AAExD,QAAI,IAAA,KAAA,CAAM,UAAU,CAAG,EAAA;AAErB,UAAI,IAAA,CAAC,yBAAyB,MAAQ,EAAA,CAAC,SAAS,CAAC,MAAA,CAAO,IAAI,CAAC,CAAG,EAAA;AAE9D,YAAW,UAAA,CAAA,SAAA;AAAA,cACT,MAAA;AAAA,cACA;AAAA,gBACE,IAAM,EAAA,aAAA;AAAA,gBACN,GAAK,EAAA,UAAA;AAAA,gBACL,UAAU,EAAC;AAAA,eACb;AAAA,cACA;AAAA,gBACE,EAAI,EAAA,SAAA;AAAA,gBACJ,KAAO,EAAA,IAAA;AAAA,gBACP,KAAO,EAAA,WAAA;AAAA,eACT;AAAA,aACF,CAAA;AACA,YAA8B,2BAAA,GAAA,KAAA,CAAA;AAAA,WAChC;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAEA,IAAA,IAAI,2BAA6B,EAAA;AAC/B,MAAA,UAAA,CAAW,IAAI,CAAA,CAAA;AAAA,KACjB;AAAA,GACF,CAAA;AAEA,EAAO,OAAA,MAAA,CAAA;AACT,CAAA;AAEO,SAAS,yBACd,IACgC,EAAA;AAChC,EAAA,OAAO,OAAQ,CAAA,SAAA,CAAU,IAAI,CAAA,IAAK,KAAK,IAAS,KAAA,aAAA,CAAA;AAClD;;;;"}