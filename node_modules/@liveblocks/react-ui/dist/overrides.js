'use client';
'use strict';

var React = require('react');
var Emoji = require('./components/internal/Emoji.js');
var pluralize = require('./utils/pluralize.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const defaultOverrides = {
  locale: "en",
  dir: "ltr",
  USER_SELF: "you",
  USER_UNKNOWN: "Anonymous",
  LIST_REMAINING: (count) => `${count} more`,
  LIST_REMAINING_USERS: (count) => `${count} ${pluralize.pluralize(count, "other")}`,
  LIST_REMAINING_COMMENTS: (count) => `${count} more ${pluralize.pluralize(count, "comment")}`,
  EMOJI_PICKER_SEARCH_PLACEHOLDER: "Search\u2026",
  EMOJI_PICKER_EMPTY: "No emoji found.",
  EMOJI_PICKER_ERROR: () => "There was an error while getting the list of emoji.",
  COMPOSER_INSERT_MENTION: "Mention someone",
  COMPOSER_INSERT_EMOJI: "Add emoji",
  COMPOSER_PLACEHOLDER: "Write a comment\u2026",
  COMPOSER_SEND: "Send",
  COMMENT_EDITED: "(edited)",
  COMMENT_DELETED: "This comment has been deleted.",
  COMMENT_MORE: "More",
  COMMENT_EDIT: "Edit comment",
  COMMENT_EDIT_COMPOSER_PLACEHOLDER: "Edit comment\u2026",
  COMMENT_EDIT_COMPOSER_CANCEL: "Cancel",
  COMMENT_EDIT_COMPOSER_SAVE: "Save",
  COMMENT_DELETE: "Delete comment",
  COMMENT_ADD_REACTION: "Add reaction",
  COMMENT_REACTION_LIST: (list, emoji) => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, list, " reacted with ", /* @__PURE__ */ React__namespace.createElement(Emoji.Emoji, {
    emoji
  })),
  COMMENT_REACTION_DESCRIPTION: (emoji, count) => `${count} ${pluralize.pluralize(count, "reaction")}, react with ${emoji}`,
  THREAD_RESOLVE: "Resolve thread",
  THREAD_UNRESOLVE: "Re-open thread",
  THREAD_NEW_INDICATOR: "New",
  THREAD_NEW_INDICATOR_DESCRIPTION: "New comments",
  THREAD_COMPOSER_PLACEHOLDER: "Reply to thread\u2026",
  THREAD_COMPOSER_SEND: "Reply",
  INBOX_NOTIFICATION_MORE: "More",
  INBOX_NOTIFICATION_MARK_AS_READ: "Mark as read",
  INBOX_NOTIFICATION_DELETE: "Delete notification",
  INBOX_NOTIFICATION_THREAD_COMMENTS_LIST: (list, room) => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, list, " commented", room ? /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, " in ", room) : /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, " in a thread")),
  INBOX_NOTIFICATION_THREAD_MENTION: (user, room) => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, user, " mentioned you", room ? /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, " in ", room) : null),
  INBOX_NOTIFICATION_TEXT_MENTION: (user, room) => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, user, " mentioned you", room ? /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, " in ", room) : null),
  HISTORY_VERSION_PREVIEW_AUTHORS_LIST: (list) => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, "Edits from ", list),
  HISTORY_VERSION_PREVIEW_RESTORE: "Restore",
  HISTORY_VERSION_PREVIEW_EMPTY: "No content.",
  HISTORY_VERSION_PREVIEW_ERROR: () => "There was an error while getting this version."
};
const OverridesContext = React.createContext(void 0);
function useOverrides(overrides) {
  const contextOverrides = React.useContext(OverridesContext);
  return React.useMemo(
    () => ({
      ...defaultOverrides,
      ...contextOverrides,
      ...overrides
    }),
    [contextOverrides, overrides]
  );
}
function OverridesProvider({
  children,
  overrides: providerOverrides
}) {
  const contextOverrides = React.useContext(OverridesContext);
  const overrides = React.useMemo(
    () => ({
      ...defaultOverrides,
      ...contextOverrides,
      ...providerOverrides
    }),
    [contextOverrides, providerOverrides]
  );
  return /* @__PURE__ */ React__namespace.createElement(OverridesContext.Provider, {
    value: overrides
  }, children);
}

exports.OverridesContext = OverridesContext;
exports.OverridesProvider = OverridesProvider;
exports.defaultOverrides = defaultOverrides;
exports.useOverrides = useOverrides;
//# sourceMappingURL=overrides.js.map
