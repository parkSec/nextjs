{"version":3,"file":"use-initial.js","sources":["../../src/utils/use-initial.ts"],"sourcesContent":["import { useRef } from \"react\";\n\n/**\n * \"Freezes\" a given value, so that it will return the same value/instance on\n * each subsequent render. This can be used to freeze \"initial\" values for\n * custom hooks, much like how `useState(initialState)` or\n * `useRef(initialValue)` works.\n */\nexport function useInitial<T>(value: T | (() => T)): T {\n  return useRef(value instanceof Function ? value() : value).current;\n}\n"],"names":["useRef"],"mappings":";;;;AAQO,SAAS,WAAc,KAAyB,EAAA;AACrD,EAAA,OAAOA,aAAO,KAAiB,YAAA,QAAA,GAAW,KAAM,EAAA,GAAI,KAAK,CAAE,CAAA,OAAA,CAAA;AAC7D;;;;"}