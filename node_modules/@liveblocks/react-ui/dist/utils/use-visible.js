'use strict';

var React = require('react');
var useLatest = require('./use-latest.js');

let intersectionObserver;
const intersectionCallbacks = /* @__PURE__ */ new WeakMap();
function observe(element, callback) {
  if (!intersectionObserver) {
    intersectionObserver = new IntersectionObserver((entries) => {
      for (const entry of entries) {
        const callback2 = intersectionCallbacks.get(entry.target);
        callback2?.(entry);
      }
    });
  }
  intersectionCallbacks.set(element, callback);
  intersectionObserver.observe(element);
}
function unobserve(element) {
  intersectionCallbacks.delete(element);
  intersectionObserver?.unobserve(element);
}
function useVisibleCallback(ref, callback, options) {
  const enabled = options?.enabled ?? true;
  const latestCallback = useLatest.useLatest(callback);
  React.useEffect(() => {
    const element = ref.current;
    if (!element) {
      return;
    }
    if (enabled) {
      observe(element, (entry) => {
        if (entry.isIntersecting) {
          latestCallback.current();
        }
      });
    } else {
      unobserve(element);
    }
    return () => {
      unobserve(element);
    };
  }, [enabled]);
}

exports.useVisibleCallback = useVisibleCallback;
//# sourceMappingURL=use-visible.js.map
