'use strict';

var autoLinks = require('../../slate/plugins/auto-links.js');
var customLinks = require('../../slate/plugins/custom-links.js');
var mentions = require('../../slate/plugins/mentions.js');
var isText = require('../../slate/utils/is-text.js');
var exists = require('../../utils/exists.js');
var utils = require('../Comment/utils.js');

function composerBodyMentionToCommentBodyMention(mention) {
  return {
    type: "mention",
    id: mention.id
  };
}
function composerBodyAutoLinkToCommentBodyLink(link) {
  return {
    type: "link",
    url: link.url
  };
}
function composerBodyCustomLinkToCommentBodyLink(link) {
  return {
    type: "link",
    url: link.url,
    text: link.children.map((child) => child.text).join("")
  };
}
function commentBodyMentionToComposerBodyMention(mention) {
  return {
    type: "mention",
    id: mention.id,
    children: [{ text: "" }]
  };
}
function commentBodyLinkToComposerBodyLink(link) {
  if (link.text) {
    return {
      type: "custom-link",
      url: link.url,
      children: [{ text: link.text }]
    };
  } else {
    return {
      type: "auto-link",
      url: link.url,
      children: [{ text: link.url }]
    };
  }
}
function composerBodyToCommentBody(body) {
  return {
    version: 1,
    content: body.map((block) => {
      if (block.type !== "paragraph") {
        return null;
      }
      const children = block.children.map((inline) => {
        if (mentions.isComposerBodyMention(inline)) {
          return composerBodyMentionToCommentBodyMention(inline);
        }
        if (autoLinks.isComposerBodyAutoLink(inline)) {
          return composerBodyAutoLinkToCommentBodyLink(inline);
        }
        if (customLinks.isComposerBodyCustomLink(inline)) {
          return composerBodyCustomLinkToCommentBodyLink(inline);
        }
        if (isText.isText(inline)) {
          return inline;
        }
        return null;
      }).filter(exists.exists);
      return {
        ...block,
        children
      };
    }).filter(exists.exists)
  };
}
const emptyComposerBody = [];
function commentBodyToComposerBody(body) {
  if (!body || !body?.content) {
    return emptyComposerBody;
  }
  return body.content.map((block) => {
    if (block.type !== "paragraph") {
      return null;
    }
    const children = block.children.map((inline) => {
      if (utils.isCommentBodyMention(inline)) {
        return commentBodyMentionToComposerBodyMention(inline);
      }
      if (utils.isCommentBodyLink(inline)) {
        return commentBodyLinkToComposerBodyLink(inline);
      }
      if (utils.isCommentBodyText(inline)) {
        return inline;
      }
      return null;
    }).filter(exists.exists);
    return {
      ...block,
      children
    };
  }).filter(exists.exists);
}
function getPlacementFromPosition(position, direction = "ltr") {
  return `${position}-${direction === "rtl" ? "end" : "start"}`;
}
function getSideAndAlignFromPlacement(placement) {
  const [side, align = "center"] = placement.split("-");
  return [side, align];
}

exports.commentBodyLinkToComposerBodyLink = commentBodyLinkToComposerBodyLink;
exports.commentBodyMentionToComposerBodyMention = commentBodyMentionToComposerBodyMention;
exports.commentBodyToComposerBody = commentBodyToComposerBody;
exports.composerBodyAutoLinkToCommentBodyLink = composerBodyAutoLinkToCommentBodyLink;
exports.composerBodyCustomLinkToCommentBodyLink = composerBodyCustomLinkToCommentBodyLink;
exports.composerBodyMentionToCommentBodyMention = composerBodyMentionToCommentBodyMention;
exports.composerBodyToCommentBody = composerBodyToCommentBody;
exports.getPlacementFromPosition = getPlacementFromPosition;
exports.getSideAndAlignFromPlacement = getSideAndAlignFromPlacement;
//# sourceMappingURL=utils.js.map
