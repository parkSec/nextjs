'use strict';

var reactSlot = require('@radix-ui/react-slot');
var React = require('react');
var mentions = require('../../slate/plugins/mentions.js');
var utils = require('./utils.js');

const COMMENT_MENTION_NAME = "CommentMention";
const COMMENT_BODY_NAME = "CommentBody";
const COMMENT_LINK_NAME = "CommentLink";
const CommentMention = React.forwardRef(
  ({ children, asChild, ...props }, forwardedRef) => {
    const Component = asChild ? reactSlot.Slot : "span";
    return /* @__PURE__ */ React.createElement(Component, {
      ...props,
      ref: forwardedRef
    }, children);
  }
);
const CommentLink = React.forwardRef(
  ({ children, asChild, ...props }, forwardedRef) => {
    const Component = asChild ? reactSlot.Slot : "a";
    return /* @__PURE__ */ React.createElement(Component, {
      target: "_blank",
      rel: "noopener noreferrer nofollow",
      ...props,
      ref: forwardedRef
    }, children);
  }
);
const defaultBodyComponents = {
  Mention: ({ userId }) => {
    return /* @__PURE__ */ React.createElement(CommentMention, null, mentions.MENTION_CHARACTER, userId);
  },
  Link: ({ href, children }) => {
    return /* @__PURE__ */ React.createElement(CommentLink, {
      href
    }, children);
  }
};
const CommentBody = React.forwardRef(
  ({ body, components, style, asChild, ...props }, forwardedRef) => {
    const Component = asChild ? reactSlot.Slot : "div";
    const { Mention, Link } = React.useMemo(
      () => ({ ...defaultBodyComponents, ...components }),
      [components]
    );
    if (!body || !body?.content) {
      return null;
    }
    return /* @__PURE__ */ React.createElement(Component, {
      ...props,
      style: { whiteSpace: "break-spaces", ...style },
      ref: forwardedRef
    }, body.content.map((block, index) => {
      switch (block.type) {
        case "paragraph":
          return /* @__PURE__ */ React.createElement("p", {
            key: index,
            style: { minHeight: "1lh" }
          }, block.children.map((inline, index2) => {
            if (utils.isCommentBodyMention(inline)) {
              return inline.id ? /* @__PURE__ */ React.createElement(Mention, {
                userId: inline.id,
                key: index2
              }) : null;
            }
            if (utils.isCommentBodyLink(inline)) {
              const href = utils.toAbsoluteUrl(inline.url) ?? inline.url;
              return /* @__PURE__ */ React.createElement(Link, {
                href,
                key: index2
              }, inline.text ?? inline.url);
            }
            let children = inline.text;
            if (inline.bold) {
              children = /* @__PURE__ */ React.createElement("strong", {
                key: index2
              }, children);
            }
            if (inline.italic) {
              children = /* @__PURE__ */ React.createElement("em", {
                key: index2
              }, children);
            }
            if (inline.strikethrough) {
              children = /* @__PURE__ */ React.createElement("s", {
                key: index2
              }, children);
            }
            if (inline.code) {
              children = /* @__PURE__ */ React.createElement("code", {
                key: index2
              }, children);
            }
            return /* @__PURE__ */ React.createElement("span", {
              key: index2
            }, children);
          }));
        default:
          return null;
      }
    }));
  }
);
if (process.env.NODE_ENV !== "production") {
  CommentBody.displayName = COMMENT_BODY_NAME;
  CommentMention.displayName = COMMENT_MENTION_NAME;
  CommentLink.displayName = COMMENT_LINK_NAME;
}

exports.Body = CommentBody;
exports.Link = CommentLink;
exports.Mention = CommentMention;
//# sourceMappingURL=index.js.map
