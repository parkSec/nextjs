import { kInternal, stringify, raise } from '@liveblocks/core';
import { useClient, useRoom, ClientContext, RoomContext, useSelf } from '@liveblocks/react';
import React__default, { useContext } from 'react';
import { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';

const MENTION_SUGGESTIONS_DEBOUNCE = 500;
const _cachesByClient = /* @__PURE__ */ new WeakMap();
function getMentionSuggestionsCacheForClient(client) {
  let cache = _cachesByClient.get(client);
  if (!cache) {
    cache = /* @__PURE__ */ new Map();
    _cachesByClient.set(client, cache);
  }
  return cache;
}
function useMentionSuggestions(search) {
  const client = useClient();
  const room = useRoom();
  const [mentionSuggestions, setMentionSuggestions] = React__default.useState();
  const lastInvokedAt = React__default.useRef();
  React__default.useEffect(() => {
    const resolveMentionSuggestions = client[kInternal].resolveMentionSuggestions;
    if (search === void 0 || !resolveMentionSuggestions) {
      return;
    }
    const resolveMentionSuggestionsArgs = { text: search, roomId: room.id };
    const mentionSuggestionsCacheKey = stringify(resolveMentionSuggestionsArgs);
    let debounceTimeout;
    let isCanceled = false;
    const mentionSuggestionsCache = getMentionSuggestionsCacheForClient(client);
    const getMentionSuggestions = async () => {
      try {
        lastInvokedAt.current = performance.now();
        const mentionSuggestions2 = await resolveMentionSuggestions(
          resolveMentionSuggestionsArgs
        );
        if (!isCanceled) {
          setMentionSuggestions(mentionSuggestions2);
          mentionSuggestionsCache.set(
            mentionSuggestionsCacheKey,
            mentionSuggestions2
          );
        }
      } catch (error) {
        console.error(error?.message);
      }
    };
    if (mentionSuggestionsCache.has(mentionSuggestionsCacheKey)) {
      setMentionSuggestions(
        mentionSuggestionsCache.get(mentionSuggestionsCacheKey)
      );
    } else if (!lastInvokedAt.current || Math.abs(performance.now() - lastInvokedAt.current) > MENTION_SUGGESTIONS_DEBOUNCE) {
      void getMentionSuggestions();
    } else {
      debounceTimeout = window.setTimeout(() => {
        void getMentionSuggestions();
      }, MENTION_SUGGESTIONS_DEBOUNCE);
    }
    return () => {
      isCanceled = true;
      window.clearTimeout(debounceTimeout);
    };
  }, [client, room.id, search]);
  return mentionSuggestions;
}
function useCurrentUserIdFromRoom() {
  return useSelf((user) => typeof user.id === "string" ? user.id : null);
}
function useCurrentUserIdFromClient_withClient(client) {
  const currentUserIdStore = client[kInternal].currentUserIdStore;
  return useSyncExternalStore(
    currentUserIdStore.subscribe,
    currentUserIdStore.get,
    currentUserIdStore.get
  );
}
function useCurrentUserId() {
  const client = useContext(ClientContext);
  const room = useContext(RoomContext);
  if (room !== null) {
    return useCurrentUserIdFromRoom();
  } else if (client !== null) {
    return useCurrentUserIdFromClient_withClient(client);
  } else {
    raise(
      "LiveblocksProvider or RoomProvider are missing from the React tree."
    );
  }
}

export { useCurrentUserId, useMentionSuggestions };
//# sourceMappingURL=shared.mjs.map
