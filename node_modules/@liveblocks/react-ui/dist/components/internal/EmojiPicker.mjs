import * as PopoverPrimitive from '@radix-ui/react-popover';
export { PopoverTrigger as EmojiPickerTrigger } from '@radix-ui/react-popover';
import React__default, { forwardRef, useState, useCallback, useMemo } from 'react';
import { useLiveblocksUIConfig } from '../../config.mjs';
import { FLOATING_ELEMENT_SIDE_OFFSET, FLOATING_ELEMENT_COLLISION_PADDING } from '../../constants.mjs';
import { SearchIcon } from '../../icons/Search.mjs';
import { SpinnerIcon } from '../../icons/Spinner.mjs';
import { useOverrides } from '../../overrides.mjs';
import { Root as EmojiPickerRoot, Search as EmojiPickerSearch, Content as EmojiPickerContent } from '../../primitives/EmojiPicker/index.mjs';
import { classNames } from '../../utils/class-names.mjs';
import { Emoji } from './Emoji.mjs';

function EmojiPickerLoading({
  className,
  ...props
}) {
  return /* @__PURE__ */ React__default.createElement("div", {
    className: classNames("lb-loading lb-emoji-picker-loading", className),
    ...props
  }, /* @__PURE__ */ React__default.createElement(SpinnerIcon, null));
}
function EmojiPickerEmpty({
  className,
  ...props
}) {
  const $ = useOverrides();
  return /* @__PURE__ */ React__default.createElement("div", {
    className: classNames("lb-empty lb-emoji-picker-empty", className),
    ...props
  }, $.EMOJI_PICKER_EMPTY);
}
function EmojiPickerError({
  error,
  className,
  ...props
}) {
  const $ = useOverrides();
  return /* @__PURE__ */ React__default.createElement("div", {
    className: classNames("lb-error lb-emoji-picker-error", className),
    ...props
  }, $.EMOJI_PICKER_ERROR(error));
}
function EmojiPickerCategoryHeader({
  category,
  className,
  ...props
}) {
  return /* @__PURE__ */ React__default.createElement("div", {
    className: classNames("lb-emoji-picker-category-header", className),
    ...props
  }, /* @__PURE__ */ React__default.createElement("span", {
    className: "lb-emoji-picker-category-header-title"
  }, category));
}
function EmojiPickerGrid({
  children,
  className,
  ...props
}) {
  return /* @__PURE__ */ React__default.createElement("div", {
    className: classNames("lb-emoji-picker-grid", className),
    ...props
  }, children);
}
function EmojiPickerRow({
  attributes,
  children,
  className,
  ...props
}) {
  const isFirstRow = useMemo(
    () => attributes.categoryRowIndex === 0,
    [attributes.categoryRowIndex]
  );
  const isLastRow = useMemo(
    () => attributes.categoryRowIndex === attributes.categoryRowsCount - 1,
    [attributes.categoryRowIndex, attributes.categoryRowsCount]
  );
  return /* @__PURE__ */ React__default.createElement("div", {
    className: classNames("lb-emoji-picker-row", className),
    "data-first": isFirstRow ? "" : void 0,
    "data-last": isLastRow ? "" : void 0,
    ...props
  }, children);
}
function EmojiPickerEmoji({
  emoji,
  className,
  ...props
}) {
  return /* @__PURE__ */ React__default.createElement("button", {
    className: classNames("lb-emoji-picker-emoji", className),
    ...props
  }, /* @__PURE__ */ React__default.createElement(Emoji, {
    emoji
  }));
}
const EmojiPicker = forwardRef(
  ({ onEmojiSelect, onOpenChange, children, className, ...props }, forwardedRef) => {
    const [isOpen, setOpen] = useState(false);
    const { portalContainer } = useLiveblocksUIConfig();
    const $ = useOverrides();
    const handleOpenChange = useCallback(
      (isOpen2) => {
        setOpen(isOpen2);
        onOpenChange?.(isOpen2);
      },
      [onOpenChange]
    );
    const handleEmojiSelect = useCallback(
      (emoji) => {
        setOpen(false);
        onEmojiSelect?.(emoji);
      },
      [onEmojiSelect]
    );
    return /* @__PURE__ */ React__default.createElement(PopoverPrimitive.Root, {
      open: isOpen,
      onOpenChange: handleOpenChange
    }, children, /* @__PURE__ */ React__default.createElement(PopoverPrimitive.Portal, {
      container: portalContainer
    }, /* @__PURE__ */ React__default.createElement(PopoverPrimitive.Content, {
      side: "top",
      align: "center",
      sideOffset: FLOATING_ELEMENT_SIDE_OFFSET,
      collisionPadding: FLOATING_ELEMENT_COLLISION_PADDING,
      className: classNames(
        "lb-root lb-portal lb-elevation lb-emoji-picker",
        className
      ),
      ...props,
      ref: forwardedRef
    }, /* @__PURE__ */ React__default.createElement(EmojiPickerRoot, {
      onEmojiSelect: handleEmojiSelect,
      locale: $.locale
    }, /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-emoji-picker-header"
    }, /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-emoji-picker-search-container"
    }, /* @__PURE__ */ React__default.createElement(EmojiPickerSearch, {
      className: "lb-emoji-picker-search",
      placeholder: $.EMOJI_PICKER_SEARCH_PLACEHOLDER,
      autoFocus: true
    }), /* @__PURE__ */ React__default.createElement(SearchIcon, {
      className: "lb-emoji-picker-search-icon"
    }))), /* @__PURE__ */ React__default.createElement(EmojiPickerContent, {
      className: "lb-emoji-picker-content",
      components: {
        Loading: EmojiPickerLoading,
        Empty: EmojiPickerEmpty,
        Error: EmojiPickerError,
        CategoryHeader: EmojiPickerCategoryHeader,
        Grid: EmojiPickerGrid,
        Row: EmojiPickerRow,
        Emoji: EmojiPickerEmoji
      }
    })))));
  }
);

export { EmojiPicker };
//# sourceMappingURL=EmojiPicker.mjs.map
