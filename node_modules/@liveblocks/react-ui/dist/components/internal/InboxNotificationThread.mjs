import { getMentionedIdsFromCommentBody } from '@liveblocks/core';
import React__default from 'react';
import { useOverrides } from '../../overrides.mjs';
import { Body as CommentBody } from '../../primitives/Comment/index.mjs';
import { classNames } from '../../utils/class-names.mjs';
import { CommentMention, CommentNonInteractiveLink, CommentNonInteractiveReaction } from '../Comment.mjs';
import { User } from './User.mjs';

const INBOX_NOTIFICATION_THREAD_MAX_COMMENTS = 3;
function InboxNotificationComment({
  comment,
  showHeader = true,
  overrides,
  className,
  ...props
}) {
  const $ = useOverrides(overrides);
  return /* @__PURE__ */ React__default.createElement("div", {
    className: classNames(
      "lb-root lb-inbox-notification-comment lb-comment",
      className
    ),
    ...props
  }, showHeader && /* @__PURE__ */ React__default.createElement("div", {
    className: "lb-comment-header"
  }, /* @__PURE__ */ React__default.createElement(User, {
    className: "lb-comment-author",
    userId: comment.userId
  })), /* @__PURE__ */ React__default.createElement("div", {
    className: "lb-comment-content"
  }, comment.body ? /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(CommentBody, {
    className: "lb-comment-body",
    body: comment.body,
    components: {
      Mention: CommentMention,
      Link: CommentNonInteractiveLink
    }
  }), comment.reactions.length > 0 && /* @__PURE__ */ React__default.createElement("div", {
    className: "lb-comment-reactions"
  }, comment.reactions.map((reaction) => /* @__PURE__ */ React__default.createElement(CommentNonInteractiveReaction, {
    key: reaction.emoji,
    reaction,
    overrides,
    disabled: true
  })))) : /* @__PURE__ */ React__default.createElement("div", {
    className: "lb-comment-body"
  }, /* @__PURE__ */ React__default.createElement("p", {
    className: "lb-comment-deleted"
  }, $.COMMENT_DELETED))));
}
function findLastCommentWithMentionedId(comments, mentionedId) {
  for (let i = comments.length - 1; i >= 0; i--) {
    const comment = comments[i];
    if (comment.userId === mentionedId) {
      continue;
    }
    if (comment.body) {
      const mentionedIds = getMentionedIdsFromCommentBody(comment.body);
      if (mentionedIds.includes(mentionedId)) {
        return comment;
      }
    }
  }
  return;
}
function getUserIdsFromComments(comments) {
  return Array.from(new Set(comments.map((comment) => comment.userId)));
}
function generateInboxNotificationThreadContents(inboxNotification, thread, userId) {
  const unreadComments = thread.comments.filter((comment) => {
    if (!comment.body) {
      return false;
    }
    return inboxNotification.readAt ? comment.createdAt > inboxNotification.readAt && comment.createdAt <= inboxNotification.notifiedAt : comment.createdAt <= inboxNotification.notifiedAt;
  });
  if (unreadComments.length === 0) {
    const lastComments = thread.comments.filter((comment) => comment.body).slice(-INBOX_NOTIFICATION_THREAD_MAX_COMMENTS);
    return {
      type: "comments",
      unread: false,
      comments: lastComments,
      userIds: getUserIdsFromComments(lastComments),
      date: inboxNotification.notifiedAt
    };
  }
  const commentWithMention = findLastCommentWithMentionedId(
    unreadComments,
    userId
  );
  if (commentWithMention) {
    return {
      type: "mention",
      unread: true,
      comments: [commentWithMention],
      userIds: [commentWithMention.userId],
      date: commentWithMention.createdAt
    };
  }
  const lastUnreadComments = unreadComments.slice(
    -INBOX_NOTIFICATION_THREAD_MAX_COMMENTS
  );
  return {
    type: "comments",
    unread: true,
    comments: lastUnreadComments,
    userIds: getUserIdsFromComments(unreadComments),
    date: inboxNotification.notifiedAt
  };
}

export { INBOX_NOTIFICATION_THREAD_MAX_COMMENTS, InboxNotificationComment, generateInboxNotificationThreadContents };
//# sourceMappingURL=InboxNotificationThread.mjs.map
