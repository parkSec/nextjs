'use client';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';
export { TooltipProvider } from '@radix-ui/react-tooltip';
import React__default, { forwardRef, useMemo } from 'react';
import { useLiveblocksUIConfig } from '../../config.mjs';
import { FLOATING_ELEMENT_SIDE_OFFSET, FLOATING_ELEMENT_COLLISION_PADDING } from '../../constants.mjs';
import { classNames } from '../../utils/class-names.mjs';
import { isApple } from '../../utils/is-apple.mjs';

const KEYS = {
  alt: () => ({ title: "Alt", key: "\u2325" }),
  mod: () => isApple() ? { title: "Command", key: "\u2318" } : { title: "Ctrl", key: "\u2303" },
  shift: () => {
    return { title: "Shift", key: "\u21E7" };
  },
  enter: () => {
    return { title: "Enter", key: "\u23CE" };
  }
};
const Tooltip = forwardRef(
  ({ children, content, multiline, className, ...props }, forwardedRef) => {
    const { portalContainer } = useLiveblocksUIConfig();
    return /* @__PURE__ */ React__default.createElement(TooltipPrimitive.Root, {
      disableHoverableContent: true
    }, /* @__PURE__ */ React__default.createElement(TooltipPrimitive.Trigger, {
      asChild: true,
      ref: forwardedRef
    }, children), /* @__PURE__ */ React__default.createElement(TooltipPrimitive.Portal, {
      container: portalContainer
    }, /* @__PURE__ */ React__default.createElement(TooltipPrimitive.Content, {
      className: classNames(
        "lb-root lb-portal lb-tooltip",
        multiline && "lb-tooltip:multiline",
        className
      ),
      side: "top",
      align: "center",
      sideOffset: FLOATING_ELEMENT_SIDE_OFFSET,
      collisionPadding: FLOATING_ELEMENT_COLLISION_PADDING,
      ...props
    }, content)));
  }
);
const ShortcutTooltip = forwardRef(({ children, content, shortcut, ...props }, forwardedRef) => {
  return /* @__PURE__ */ React__default.createElement(Tooltip, {
    content: /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, content, shortcut && /* @__PURE__ */ React__default.createElement("kbd", {
      className: "lb-tooltip-shortcut"
    }, shortcut)),
    ...props,
    ref: forwardedRef
  }, children);
});
function ShortcutTooltipKey({
  name,
  ...props
}) {
  const { title, key } = useMemo(() => KEYS[name]?.(), [name]);
  return /* @__PURE__ */ React__default.createElement("abbr", {
    title,
    ...props
  }, key);
}

export { ShortcutTooltip, ShortcutTooltipKey, Tooltip };
//# sourceMappingURL=Tooltip.mjs.map
