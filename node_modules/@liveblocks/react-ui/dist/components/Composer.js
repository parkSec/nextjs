'use client';
'use strict';

var core = require('@liveblocks/core');
var react = require('@liveblocks/react');
var React = require('react');
var Emoji = require('../icons/Emoji.js');
var Mention = require('../icons/Mention.js');
var Send = require('../icons/Send.js');
var overrides = require('../overrides.js');
var index = require('../primitives/Composer/index.js');
var contexts = require('../primitives/Composer/contexts.js');
var mentions = require('../slate/plugins/mentions.js');
var classNames = require('../utils/class-names.js');
var useControllableState = require('../utils/use-controllable-state.js');
var Attribution = require('./internal/Attribution.js');
var Avatar = require('./internal/Avatar.js');
var Button = require('./internal/Button.js');
var EmojiPicker = require('./internal/EmojiPicker.js');
var Tooltip = require('./internal/Tooltip.js');
var User = require('./internal/User.js');
var TooltipPrimitive = require('@radix-ui/react-tooltip');
var PopoverPrimitive = require('@radix-ui/react-popover');

function ComposerInsertMentionEditorAction({
  label,
  className,
  onClick,
  ...props
}) {
  const { createMention } = contexts.useComposer();
  const preventDefault = React.useCallback((event) => {
    event.preventDefault();
  }, []);
  const handleClick = React.useCallback(
    (event) => {
      onClick?.(event);
      if (!event.isDefaultPrevented()) {
        event.stopPropagation();
        createMention();
      }
    },
    [createMention, onClick]
  );
  return /* @__PURE__ */ React.createElement(Tooltip.Tooltip, {
    content: label
  }, /* @__PURE__ */ React.createElement(Button.Button, {
    className: classNames.classNames("lb-composer-editor-action", className),
    onMouseDown: preventDefault,
    onClick: handleClick,
    "aria-label": label,
    ...props
  }, /* @__PURE__ */ React.createElement(Mention.MentionIcon, {
    className: "lb-button-icon"
  })));
}
function ComposerInsertEmojiEditorAction({
  label,
  onPickerOpenChange,
  className,
  ...props
}) {
  const { insertText } = contexts.useComposer();
  const preventDefault = React.useCallback((event) => {
    event.preventDefault();
  }, []);
  const stopPropagation = React.useCallback((event) => {
    event.stopPropagation();
  }, []);
  return /* @__PURE__ */ React.createElement(EmojiPicker.EmojiPicker, {
    onEmojiSelect: insertText,
    onOpenChange: onPickerOpenChange
  }, /* @__PURE__ */ React.createElement(Tooltip.Tooltip, {
    content: label
  }, /* @__PURE__ */ React.createElement(PopoverPrimitive.PopoverTrigger, {
    asChild: true
  }, /* @__PURE__ */ React.createElement(Button.Button, {
    className: classNames.classNames("lb-composer-editor-action", className),
    onMouseDown: preventDefault,
    onClick: stopPropagation,
    "aria-label": label,
    ...props
  }, /* @__PURE__ */ React.createElement(Emoji.EmojiIcon, {
    className: "lb-button-icon"
  })))));
}
function ComposerMention({ userId }) {
  return /* @__PURE__ */ React.createElement(index.Mention, {
    className: "lb-composer-mention"
  }, mentions.MENTION_CHARACTER, /* @__PURE__ */ React.createElement(User.User, {
    userId
  }));
}
function ComposerMentionSuggestions({
  userIds
}) {
  return userIds.length > 0 ? /* @__PURE__ */ React.createElement(index.Suggestions, {
    className: "lb-root lb-portal lb-elevation lb-composer-suggestions lb-composer-mention-suggestions"
  }, /* @__PURE__ */ React.createElement(index.SuggestionsList, {
    className: "lb-composer-suggestions-list lb-composer-mention-suggestions-list"
  }, userIds.map((userId) => /* @__PURE__ */ React.createElement(index.SuggestionsListItem, {
    key: userId,
    className: "lb-composer-suggestions-list-item lb-composer-mention-suggestion",
    value: userId
  }, /* @__PURE__ */ React.createElement(Avatar.Avatar, {
    userId,
    className: "lb-composer-mention-suggestion-avatar"
  }), /* @__PURE__ */ React.createElement(User.User, {
    userId,
    className: "lb-composer-mention-suggestion-user"
  }))))) : null;
}
function ComposerLink({ href, children }) {
  return /* @__PURE__ */ React.createElement(index.Link, {
    href,
    className: "lb-composer-link"
  }, children);
}
const editorComponents = {
  Mention: ComposerMention,
  MentionSuggestions: ComposerMentionSuggestions,
  Link: ComposerLink
};
const ComposerWithContext = React.forwardRef(
  ({
    defaultValue,
    disabled,
    autoFocus,
    collapsed: controlledCollapsed,
    defaultCollapsed,
    onCollapsedChange: controlledOnCollapsedChange,
    actions,
    overrides: overrides$1,
    showAttribution,
    onFocus,
    onBlur,
    className,
    ...props
  }, forwardedRef) => {
    const client = react.useClient();
    const hasResolveMentionSuggestions = client[core.kInternal].resolveMentionSuggestions !== void 0;
    const self = react.useSelf();
    const isDisabled = React.useMemo(
      () => disabled || (self ? !self.canComment : false),
      [disabled, self?.canComment]
    );
    const { isEmpty } = contexts.useComposer();
    const $ = overrides.useOverrides(overrides$1);
    const [isEmojiPickerOpen, setEmojiPickerOpen] = React.useState(false);
    const [collapsed, onCollapsedChange] = useControllableState.useControllableState(
      controlledCollapsed === void 0 && defaultCollapsed === void 0 ? false : controlledCollapsed,
      controlledOnCollapsedChange,
      defaultCollapsed
    );
    const preventDefault = React.useCallback((event) => {
      event.preventDefault();
    }, []);
    const stopPropagation = React.useCallback((event) => {
      event.stopPropagation();
    }, []);
    const handleEditorClick = React.useCallback(
      (event) => {
        event.stopPropagation();
        if (isEmpty) {
          onCollapsedChange?.(false);
        }
      },
      [isEmpty, onCollapsedChange]
    );
    const handleFocus = React.useCallback(
      (event) => {
        onFocus?.(event);
        if (event.isDefaultPrevented()) {
          return;
        }
        if (isEmpty) {
          onCollapsedChange?.(false);
        }
      },
      [isEmpty, onCollapsedChange, onFocus]
    );
    const handleBlur = React.useCallback(
      (event) => {
        onBlur?.(event);
        if (event.isDefaultPrevented()) {
          return;
        }
        const isOutside = !event.currentTarget.contains(event.relatedTarget);
        if (isOutside && isEmpty && !isEmojiPickerOpen) {
          onCollapsedChange?.(true);
        }
      },
      [isEmojiPickerOpen, isEmpty, onBlur, onCollapsedChange]
    );
    return /* @__PURE__ */ React.createElement("form", {
      className: classNames.classNames(
        "lb-root lb-composer lb-composer-form",
        className
      ),
      dir: $.dir,
      ...props,
      ref: forwardedRef,
      "data-collapsed": collapsed ? "" : void 0,
      onFocus: handleFocus,
      onBlur: handleBlur
    }, /* @__PURE__ */ React.createElement(index.Editor, {
      className: "lb-composer-editor",
      onClick: handleEditorClick,
      placeholder: $.COMPOSER_PLACEHOLDER,
      defaultValue,
      disabled: isDisabled,
      autoFocus,
      components: editorComponents,
      dir: $.dir
    }), !collapsed && /* @__PURE__ */ React.createElement("div", {
      className: "lb-composer-footer"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "lb-composer-editor-actions"
    }, hasResolveMentionSuggestions && /* @__PURE__ */ React.createElement(ComposerInsertMentionEditorAction, {
      label: $.COMPOSER_INSERT_MENTION,
      disabled: isDisabled
    }), /* @__PURE__ */ React.createElement(ComposerInsertEmojiEditorAction, {
      label: $.COMPOSER_INSERT_EMOJI,
      onPickerOpenChange: setEmojiPickerOpen,
      disabled: isDisabled
    })), showAttribution && /* @__PURE__ */ React.createElement(Attribution.Attribution, null), /* @__PURE__ */ React.createElement("div", {
      className: "lb-composer-actions"
    }, actions ?? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Tooltip.ShortcutTooltip, {
      content: $.COMPOSER_SEND,
      shortcut: /* @__PURE__ */ React.createElement(Tooltip.ShortcutTooltipKey, {
        name: "enter"
      })
    }, /* @__PURE__ */ React.createElement(index.Submit, {
      disabled: isDisabled,
      asChild: true
    }, /* @__PURE__ */ React.createElement(Button.Button, {
      onMouseDown: preventDefault,
      onClick: stopPropagation,
      className: "lb-composer-action",
      variant: "primary",
      "aria-label": $.COMPOSER_SEND
    }, /* @__PURE__ */ React.createElement(Send.SendIcon, null))))))));
  }
);
const Composer = React.forwardRef(
  ({
    threadId,
    commentId,
    metadata,
    onComposerSubmit,
    onFocus,
    ...props
  }, forwardedRef) => {
    const createThread = react.useCreateThread();
    const createComment = react.useCreateComment();
    const editComment = react.useEditComment();
    const handleCommentSubmit = React.useCallback(
      (comment, event) => {
        onComposerSubmit?.(comment, event);
        if (event.isDefaultPrevented()) {
          return;
        }
        if (commentId && threadId) {
          editComment({
            commentId,
            threadId,
            body: comment.body
          });
        } else if (threadId) {
          createComment({
            threadId,
            body: comment.body
          });
        } else {
          createThread({
            body: comment.body,
            metadata: metadata ?? {}
          });
        }
      },
      [
        commentId,
        createComment,
        createThread,
        editComment,
        metadata,
        onComposerSubmit,
        threadId
      ]
    );
    return /* @__PURE__ */ React.createElement(TooltipPrimitive.TooltipProvider, null, /* @__PURE__ */ React.createElement(index.Form, {
      onComposerSubmit: handleCommentSubmit,
      onFocus,
      asChild: true
    }, /* @__PURE__ */ React.createElement(ComposerWithContext, {
      ...props,
      ref: forwardedRef
    })));
  }
);

exports.Composer = Composer;
//# sourceMappingURL=Composer.js.map
