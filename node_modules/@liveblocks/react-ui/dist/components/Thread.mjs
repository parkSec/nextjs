'use client';
import { useMarkThreadAsResolved, useMarkThreadAsUnresolved, useThreadSubscription } from '@liveblocks/react';
import * as TogglePrimitive from '@radix-ui/react-toggle';
import React__default, { forwardRef, useMemo, useState, useEffect, useCallback, Fragment } from 'react';
import { ArrowDownIcon } from '../icons/ArrowDown.mjs';
import { ResolveIcon } from '../icons/Resolve.mjs';
import { ResolvedIcon } from '../icons/Resolved.mjs';
import { useOverrides } from '../overrides.mjs';
import { classNames } from '../utils/class-names.mjs';
import { findLastIndex } from '../utils/find-last-index.mjs';
import { Comment } from './Comment.mjs';
import { Composer } from './Composer.mjs';
import { Button } from './internal/Button.mjs';
import { Tooltip } from './internal/Tooltip.mjs';
import { TooltipProvider } from '@radix-ui/react-tooltip';

const Thread = forwardRef(
  ({
    thread,
    indentCommentContent = true,
    showActions = "hover",
    showDeletedComments,
    showResolveAction = true,
    showReactions = true,
    showComposer = "collapsed",
    onResolvedChange,
    onCommentEdit,
    onCommentDelete,
    onThreadDelete,
    onAuthorClick,
    onMentionClick,
    overrides,
    className,
    ...props
  }, forwardedRef) => {
    const markThreadAsResolved = useMarkThreadAsResolved();
    const markThreadAsUnresolved = useMarkThreadAsUnresolved();
    const $ = useOverrides(overrides);
    const firstCommentIndex = useMemo(() => {
      return showDeletedComments ? 0 : thread.comments.findIndex((comment) => comment.body);
    }, [showDeletedComments, thread.comments]);
    const lastCommentIndex = useMemo(() => {
      return showDeletedComments ? thread.comments.length - 1 : findLastIndex(thread.comments, (comment) => comment.body);
    }, [showDeletedComments, thread.comments]);
    const { status: subscriptionStatus, unreadSince } = useThreadSubscription(
      thread.id
    );
    const unreadIndex = useMemo(() => {
      if (subscriptionStatus !== "subscribed") {
        return;
      }
      if (unreadSince === null) {
        return firstCommentIndex;
      }
      const unreadIndex2 = thread.comments.findIndex(
        (comment) => (showDeletedComments ? true : comment.body) && comment.createdAt > unreadSince
      );
      return unreadIndex2 >= 0 && unreadIndex2 < thread.comments.length ? unreadIndex2 : void 0;
    }, [
      firstCommentIndex,
      showDeletedComments,
      subscriptionStatus,
      thread.comments,
      unreadSince
    ]);
    const [newIndex, setNewIndex] = useState();
    const newIndicatorIndex = newIndex === void 0 ? unreadIndex : newIndex;
    useEffect(() => {
      if (unreadIndex) {
        setNewIndex(
          (persistedUnreadIndex) => Math.min(persistedUnreadIndex ?? Infinity, unreadIndex)
        );
      }
    }, [unreadIndex]);
    const stopPropagation = useCallback((event) => {
      event.stopPropagation();
    }, []);
    const handleResolvedChange = useCallback(
      (resolved) => {
        onResolvedChange?.(resolved);
        if (resolved) {
          markThreadAsResolved(thread.id);
        } else {
          markThreadAsUnresolved(thread.id);
        }
      },
      [
        markThreadAsResolved,
        markThreadAsUnresolved,
        onResolvedChange,
        thread.id
      ]
    );
    const handleCommentDelete = useCallback(
      (comment) => {
        onCommentDelete?.(comment);
        const filteredComments = thread.comments.filter(
          (comment2) => comment2.body
        );
        if (filteredComments.length <= 1) {
          onThreadDelete?.(thread);
        }
      },
      [onCommentDelete, onThreadDelete, thread]
    );
    return /* @__PURE__ */ React__default.createElement(TooltipProvider, null, /* @__PURE__ */ React__default.createElement("div", {
      className: classNames(
        "lb-root lb-thread",
        showActions === "hover" && "lb-thread:show-actions-hover",
        className
      ),
      "data-resolved": thread.resolved ? "" : void 0,
      "data-unread": unreadIndex !== void 0 ? "" : void 0,
      dir: $.dir,
      ...props,
      ref: forwardedRef
    }, /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-thread-comments"
    }, thread.comments.map((comment, index) => {
      const isFirstComment = index === firstCommentIndex;
      const isUnread = unreadIndex !== void 0 && index >= unreadIndex;
      const children = /* @__PURE__ */ React__default.createElement(Comment, {
        key: comment.id,
        className: "lb-thread-comment",
        "data-unread": isUnread ? "" : void 0,
        comment,
        indentContent: indentCommentContent,
        showDeleted: showDeletedComments,
        showActions,
        showReactions,
        onCommentEdit,
        onCommentDelete: handleCommentDelete,
        onAuthorClick,
        onMentionClick,
        autoMarkReadThreadId: index === lastCommentIndex && isUnread ? thread.id : void 0,
        additionalActionsClassName: isFirstComment ? "lb-thread-actions" : void 0,
        additionalActions: isFirstComment && showResolveAction ? /* @__PURE__ */ React__default.createElement(Tooltip, {
          content: thread.resolved ? $.THREAD_UNRESOLVE : $.THREAD_RESOLVE
        }, /* @__PURE__ */ React__default.createElement(TogglePrimitive.Root, {
          pressed: thread.resolved,
          onPressedChange: handleResolvedChange,
          asChild: true
        }, /* @__PURE__ */ React__default.createElement(Button, {
          className: "lb-comment-action",
          onClick: stopPropagation,
          "aria-label": thread.resolved ? $.THREAD_UNRESOLVE : $.THREAD_RESOLVE
        }, thread.resolved ? /* @__PURE__ */ React__default.createElement(ResolvedIcon, {
          className: "lb-button-icon"
        }) : /* @__PURE__ */ React__default.createElement(ResolveIcon, {
          className: "lb-button-icon"
        })))) : null
      });
      return index === newIndicatorIndex && newIndicatorIndex !== firstCommentIndex && newIndicatorIndex <= lastCommentIndex ? /* @__PURE__ */ React__default.createElement(Fragment, {
        key: comment.id
      }, /* @__PURE__ */ React__default.createElement("div", {
        className: "lb-thread-new-indicator",
        "aria-label": $.THREAD_NEW_INDICATOR_DESCRIPTION
      }, /* @__PURE__ */ React__default.createElement("span", {
        className: "lb-thread-new-indicator-label"
      }, /* @__PURE__ */ React__default.createElement(ArrowDownIcon, {
        className: "lb-thread-new-indicator-label-icon"
      }), $.THREAD_NEW_INDICATOR)), children) : children;
    })), showComposer && /* @__PURE__ */ React__default.createElement(Composer, {
      className: "lb-thread-composer",
      threadId: thread.id,
      defaultCollapsed: showComposer === "collapsed" ? true : void 0,
      overrides: {
        COMPOSER_PLACEHOLDER: $.THREAD_COMPOSER_PLACEHOLDER,
        COMPOSER_SEND: $.THREAD_COMPOSER_SEND
      }
    })));
  }
);

export { Thread };
//# sourceMappingURL=Thread.mjs.map
