'use client';
'use strict';

var core = require('@liveblocks/core');
var react = require('@liveblocks/react');
var reactSlot = require('@radix-ui/react-slot');
var TooltipPrimitive = require('@radix-ui/react-tooltip');
var React = require('react');
var components = require('../components.js');
var Check = require('../icons/Check.js');
var Delete = require('../icons/Delete.js');
var Ellipsis = require('../icons/Ellipsis.js');
var Missing = require('../icons/Missing.js');
var overrides = require('../overrides.js');
var Timestamp = require('../primitives/Timestamp.js');
var shared = require('../shared.js');
var classNames = require('../utils/class-names.js');
var url = require('../utils/url.js');
var Avatar = require('./internal/Avatar.js');
var Button = require('./internal/Button.js');
var Dropdown = require('./internal/Dropdown.js');
var InboxNotificationThread$1 = require('./internal/InboxNotificationThread.js');
var List = require('./internal/List.js');
var Room = require('./internal/Room.js');
var Tooltip = require('./internal/Tooltip.js');
var User = require('./internal/User.js');
var DropdownMenuPrimitive = require('@radix-ui/react-dropdown-menu');

const InboxNotificationLayout = React.forwardRef(
  ({
    inboxNotification,
    children,
    aside,
    title,
    date,
    unread,
    markAsReadOnClick,
    onClick,
    href,
    showActions,
    overrides: overrides$1,
    components: components$1,
    className,
    asChild,
    ...props
  }, forwardedRef) => {
    const $ = overrides.useOverrides(overrides$1);
    const { Anchor } = components.useComponents(components$1);
    const Component = asChild ? reactSlot.Slot : Anchor;
    const [isMoreActionOpen, setMoreActionOpen] = React.useState(false);
    const markInboxNotificationAsRead = react.useMarkInboxNotificationAsRead();
    const deleteInboxNotification = react.useDeleteInboxNotification();
    const handleClick = React.useCallback(
      (event) => {
        onClick?.(event);
        const shouldMarkAsReadOnClick = markAsReadOnClick ?? Boolean(href);
        if (unread && shouldMarkAsReadOnClick) {
          markInboxNotificationAsRead(inboxNotification.id);
        }
      },
      [
        href,
        inboxNotification.id,
        markAsReadOnClick,
        markInboxNotificationAsRead,
        onClick,
        unread
      ]
    );
    const stopPropagation = React.useCallback((event) => {
      event.stopPropagation();
    }, []);
    const preventDefaultAndStopPropagation = React.useCallback(
      (event) => {
        event.preventDefault();
        event.stopPropagation();
      },
      []
    );
    const handleMoreClick = React.useCallback((event) => {
      event.preventDefault();
      event.stopPropagation();
      setMoreActionOpen((open) => !open);
    }, []);
    const handleMarkAsRead = React.useCallback(() => {
      markInboxNotificationAsRead(inboxNotification.id);
    }, [inboxNotification.id, markInboxNotificationAsRead]);
    const handleDelete = React.useCallback(() => {
      deleteInboxNotification(inboxNotification.id);
    }, [inboxNotification.id, deleteInboxNotification]);
    return /* @__PURE__ */ React.createElement(TooltipPrimitive.TooltipProvider, null, /* @__PURE__ */ React.createElement(Component, {
      className: classNames.classNames(
        "lb-root lb-inbox-notification",
        showActions === "hover" && "lb-inbox-notification:show-actions-hover",
        isMoreActionOpen && "lb-inbox-notification:action-open",
        className
      ),
      dir: $.dir,
      "data-unread": unread ? "" : void 0,
      "data-kind": inboxNotification.kind,
      onClick: handleClick,
      href,
      ...props,
      ref: forwardedRef
    }, aside && /* @__PURE__ */ React.createElement("div", {
      className: "lb-inbox-notification-aside"
    }, aside), /* @__PURE__ */ React.createElement("div", {
      className: "lb-inbox-notification-content"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "lb-inbox-notification-header"
    }, /* @__PURE__ */ React.createElement("span", {
      className: "lb-inbox-notification-title"
    }, title), /* @__PURE__ */ React.createElement("div", {
      className: "lb-inbox-notification-details"
    }, /* @__PURE__ */ React.createElement("span", {
      className: "lb-inbox-notification-details-labels"
    }, /* @__PURE__ */ React.createElement(Timestamp.Timestamp, {
      locale: $.locale,
      date,
      className: "lb-date lb-inbox-notification-date"
    }), unread && /* @__PURE__ */ React.createElement("span", {
      className: "lb-inbox-notification-unread-indicator",
      role: "presentation"
    }))), showActions && /* @__PURE__ */ React.createElement("div", {
      className: "lb-inbox-notification-actions"
    }, /* @__PURE__ */ React.createElement(Dropdown.Dropdown, {
      open: isMoreActionOpen,
      onOpenChange: setMoreActionOpen,
      align: "end",
      content: /* @__PURE__ */ React.createElement(React.Fragment, null, unread ? /* @__PURE__ */ React.createElement(Dropdown.DropdownItem, {
        onSelect: handleMarkAsRead,
        onClick: stopPropagation
      }, /* @__PURE__ */ React.createElement(Check.CheckIcon, {
        className: "lb-dropdown-item-icon"
      }), $.INBOX_NOTIFICATION_MARK_AS_READ) : null, /* @__PURE__ */ React.createElement(Dropdown.DropdownItem, {
        onSelect: handleDelete,
        onClick: stopPropagation
      }, /* @__PURE__ */ React.createElement(Delete.DeleteIcon, {
        className: "lb-dropdown-item-icon"
      }), $.INBOX_NOTIFICATION_DELETE))
    }, /* @__PURE__ */ React.createElement(Tooltip.Tooltip, {
      content: $.INBOX_NOTIFICATION_MORE
    }, /* @__PURE__ */ React.createElement(DropdownMenuPrimitive.DropdownMenuTrigger, {
      asChild: true
    }, /* @__PURE__ */ React.createElement(Button.Button, {
      className: "lb-inbox-notification-action",
      onClick: handleMoreClick,
      onPointerDown: preventDefaultAndStopPropagation,
      onPointerUp: preventDefaultAndStopPropagation,
      "aria-label": $.INBOX_NOTIFICATION_MORE
    }, /* @__PURE__ */ React.createElement(Ellipsis.EllipsisIcon, {
      className: "lb-button-icon"
    }))))))), /* @__PURE__ */ React.createElement("div", {
      className: "lb-inbox-notification-body"
    }, children))));
  }
);
function InboxNotificationIcon({
  className,
  ...props
}) {
  return /* @__PURE__ */ React.createElement("div", {
    className: classNames.classNames("lb-inbox-notification-icon", className),
    ...props
  });
}
function InboxNotificationAvatar({
  className,
  ...props
}) {
  return /* @__PURE__ */ React.createElement(Avatar.Avatar, {
    className: classNames.classNames("lb-inbox-notification-avatar", className),
    ...props
  });
}
const InboxNotificationThread = React.forwardRef(
  ({
    inboxNotification,
    href,
    showRoomName = true,
    showActions = "hover",
    overrides: overrides$1,
    ...props
  }, forwardedRef) => {
    const $ = overrides.useOverrides(overrides$1);
    const thread = react.useInboxNotificationThread(inboxNotification.id);
    const currentUserId = shared.useCurrentUserId();
    const { info } = react.useRoomInfo(inboxNotification.roomId);
    const { unread, date, aside, title, content, commentId } = React.useMemo(() => {
      const contents = InboxNotificationThread$1.generateInboxNotificationThreadContents(
        inboxNotification,
        thread,
        currentUserId ?? ""
      );
      switch (contents.type) {
        case "comments": {
          const reversedUserIds = [...contents.userIds].reverse();
          const firstUserId = reversedUserIds[0];
          const aside2 = /* @__PURE__ */ React.createElement(InboxNotificationAvatar, {
            userId: firstUserId
          });
          const title2 = $.INBOX_NOTIFICATION_THREAD_COMMENTS_LIST(
            /* @__PURE__ */ React.createElement(List.List, {
              values: reversedUserIds.map((userId) => /* @__PURE__ */ React.createElement(User.User, {
                key: userId,
                userId,
                replaceSelf: true
              })),
              formatRemaining: $.LIST_REMAINING_USERS,
              truncate: InboxNotificationThread$1.INBOX_NOTIFICATION_THREAD_MAX_COMMENTS - 1,
              locale: $.locale
            }),
            showRoomName ? /* @__PURE__ */ React.createElement(Room.Room, {
              roomId: thread.roomId
            }) : void 0,
            reversedUserIds.length
          );
          const content2 = /* @__PURE__ */ React.createElement("div", {
            className: "lb-inbox-notification-comments"
          }, contents.comments.map((comment) => /* @__PURE__ */ React.createElement(InboxNotificationThread$1.InboxNotificationComment, {
            key: comment.id,
            comment,
            showHeader: contents.comments.length > 1,
            overrides: overrides$1
          })));
          return {
            unread: contents.unread,
            date: contents.date,
            aside: aside2,
            title: title2,
            content: content2,
            threadId: thread.id,
            commentId: contents.comments[contents.comments.length - 1].id
          };
        }
        case "mention": {
          const mentionUserId = contents.userIds[0];
          const mentionComment = contents.comments[0];
          const aside2 = /* @__PURE__ */ React.createElement(InboxNotificationAvatar, {
            userId: mentionUserId
          });
          const title2 = $.INBOX_NOTIFICATION_THREAD_MENTION(
            /* @__PURE__ */ React.createElement(User.User, {
              key: mentionUserId,
              userId: mentionUserId
            }),
            showRoomName ? /* @__PURE__ */ React.createElement(Room.Room, {
              roomId: thread.roomId
            }) : void 0
          );
          const content2 = /* @__PURE__ */ React.createElement("div", {
            className: "lb-inbox-notification-comments"
          }, /* @__PURE__ */ React.createElement(InboxNotificationThread$1.InboxNotificationComment, {
            key: mentionComment.id,
            comment: mentionComment,
            showHeader: false
          }));
          return {
            unread: contents.unread,
            date: contents.date,
            aside: aside2,
            title: title2,
            content: content2,
            threadId: thread.id,
            commentId: mentionComment.id
          };
        }
        default:
          return core.assertNever(
            contents,
            "Unexpected thread inbox notification type"
          );
      }
    }, [$, currentUserId, inboxNotification, overrides$1, showRoomName, thread]);
    const resolvedHref = React.useMemo(() => {
      const resolvedHref2 = href ?? info?.url;
      return resolvedHref2 ? url.generateURL(resolvedHref2, void 0, commentId) : void 0;
    }, [commentId, href, info?.url]);
    return /* @__PURE__ */ React.createElement(InboxNotificationLayout, {
      inboxNotification,
      aside,
      title,
      date,
      unread,
      overrides: overrides$1,
      href: resolvedHref,
      showActions,
      markAsReadOnClick: false,
      ...props,
      ref: forwardedRef
    }, content);
  }
);
const InboxNotificationTextMention = React.forwardRef(
  ({
    inboxNotification,
    showActions = "hover",
    showRoomName = true,
    overrides: overrides$1,
    ...props
  }, ref) => {
    const $ = overrides.useOverrides(overrides$1);
    const unread = React.useMemo(() => {
      return !inboxNotification.readAt || inboxNotification.notifiedAt > inboxNotification.readAt;
    }, [inboxNotification.notifiedAt, inboxNotification.readAt]);
    return /* @__PURE__ */ React.createElement(InboxNotificationLayout, {
      inboxNotification,
      aside: /* @__PURE__ */ React.createElement(InboxNotificationAvatar, {
        userId: inboxNotification.createdBy
      }),
      title: $.INBOX_NOTIFICATION_TEXT_MENTION(
        /* @__PURE__ */ React.createElement(User.User, {
          key: inboxNotification.createdBy,
          userId: inboxNotification.createdBy
        }),
        showRoomName ? /* @__PURE__ */ React.createElement(Room.Room, {
          roomId: inboxNotification.roomId
        }) : void 0
      ),
      date: inboxNotification.notifiedAt,
      unread,
      overrides: overrides$1,
      showActions,
      ...props,
      ref
    });
  }
);
const InboxNotificationCustom = React.forwardRef(
  ({
    inboxNotification,
    showActions = "hover",
    title,
    aside,
    children,
    overrides,
    ...props
  }, forwardedRef) => {
    const unread = React.useMemo(() => {
      return !inboxNotification.readAt || inboxNotification.notifiedAt > inboxNotification.readAt;
    }, [inboxNotification.notifiedAt, inboxNotification.readAt]);
    return /* @__PURE__ */ React.createElement(InboxNotificationLayout, {
      inboxNotification,
      aside,
      title,
      date: inboxNotification.notifiedAt,
      unread,
      overrides,
      showActions,
      ...props,
      ref: forwardedRef
    }, children);
  }
);
const InboxNotificationCustomMissing = React.forwardRef(({ inboxNotification, ...props }, forwardedRef) => {
  return /* @__PURE__ */ React.createElement(InboxNotificationCustom, {
    inboxNotification,
    ...props,
    title: /* @__PURE__ */ React.createElement(React.Fragment, null, "Custom notification kind ", /* @__PURE__ */ React.createElement("code", null, inboxNotification.kind), " is not handled"),
    aside: /* @__PURE__ */ React.createElement(InboxNotificationIcon, null, /* @__PURE__ */ React.createElement(Missing.MissingIcon, null)),
    ref: forwardedRef,
    "data-missing": ""
  }, "Notifications of this kind won\u2019t be displayed in production. Use the", " ", /* @__PURE__ */ React.createElement("code", null, "kinds"), " prop to define how they should be rendered.");
});
const inboxNotificationKindsWarnings = /* @__PURE__ */ new Set();
const InboxNotification = Object.assign(
  React.forwardRef(
    ({ inboxNotification, kinds, ...props }, forwardedRef) => {
      switch (inboxNotification.kind) {
        case "thread": {
          const ResolvedInboxNotificationThread = kinds?.thread ?? InboxNotificationThread;
          return /* @__PURE__ */ React.createElement(ResolvedInboxNotificationThread, {
            inboxNotification,
            ...props,
            ref: forwardedRef
          });
        }
        case "textMention": {
          const ResolvedInboxNotificationTextMention = kinds?.textMention ?? InboxNotificationTextMention;
          return /* @__PURE__ */ React.createElement(ResolvedInboxNotificationTextMention, {
            inboxNotification,
            ...props,
            ref: forwardedRef
          });
        }
        default: {
          const ResolvedInboxNotificationCustom = kinds?.[inboxNotification.kind];
          if (!ResolvedInboxNotificationCustom) {
            if (process.env.NODE_ENV !== "production") {
              if (!inboxNotificationKindsWarnings.has(inboxNotification.kind)) {
                inboxNotificationKindsWarnings.add(inboxNotification.kind);
                core.console.warn(
                  `Custom notification kind "${inboxNotification.kind}" is not handled so notifications of this kind will not be displayed in production. Use the kinds prop to define how they should be rendered.`
                );
              }
              return /* @__PURE__ */ React.createElement(InboxNotificationCustomMissing, {
                inboxNotification,
                ...props,
                ref: forwardedRef
              });
            } else {
              return null;
            }
          }
          return /* @__PURE__ */ React.createElement(ResolvedInboxNotificationCustom, {
            inboxNotification,
            ...props,
            ref: forwardedRef
          });
        }
      }
    }
  ),
  {
    Thread: InboxNotificationThread,
    TextMention: InboxNotificationTextMention,
    Custom: InboxNotificationCustom,
    Icon: InboxNotificationIcon,
    Avatar: InboxNotificationAvatar
  }
);

exports.InboxNotification = InboxNotification;
//# sourceMappingURL=InboxNotification.js.map
