'use client';
import { useAddReaction, useRemoveReaction, RoomContext, useDeleteComment, useEditComment, useMarkThreadAsRead } from '@liveblocks/react';
import * as TogglePrimitive from '@radix-ui/react-toggle';
import React__default, { forwardRef, useMemo, useCallback, useContext, useRef, useState, useEffect } from 'react';
import { CheckIcon } from '../icons/Check.mjs';
import { CrossIcon } from '../icons/Cross.mjs';
import { DeleteIcon } from '../icons/Delete.mjs';
import { EditIcon } from '../icons/Edit.mjs';
import { EllipsisIcon } from '../icons/Ellipsis.mjs';
import { EmojiAddIcon } from '../icons/EmojiAdd.mjs';
import { useOverrides } from '../overrides.mjs';
import { Body as CommentBody, Mention as CommentMention$1, Link as CommentLink$1 } from '../primitives/Comment/index.mjs';
import { Submit as ComposerSubmit } from '../primitives/Composer/index.mjs';
import { Timestamp } from '../primitives/Timestamp.mjs';
import { useCurrentUserId } from '../shared.mjs';
import { MENTION_CHARACTER } from '../slate/plugins/mentions.mjs';
import { classNames } from '../utils/class-names.mjs';
import { useRefs } from '../utils/use-refs.mjs';
import { useVisibleCallback } from '../utils/use-visible.mjs';
import { useWindowFocus } from '../utils/use-window-focus.mjs';
import { Composer } from './Composer.mjs';
import { Avatar } from './internal/Avatar.mjs';
import { Button } from './internal/Button.mjs';
import { Dropdown, DropdownItem } from './internal/Dropdown.mjs';
import { Emoji } from './internal/Emoji.mjs';
import { EmojiPicker } from './internal/EmojiPicker.mjs';
import { List } from './internal/List.mjs';
import { Tooltip, ShortcutTooltip, ShortcutTooltipKey } from './internal/Tooltip.mjs';
import { User } from './internal/User.mjs';
import { TooltipProvider } from '@radix-ui/react-tooltip';
import { PopoverTrigger } from '@radix-ui/react-popover';
import { DropdownMenuTrigger } from '@radix-ui/react-dropdown-menu';

const REACTIONS_TRUNCATE = 5;
function CommentMention({
  userId,
  className,
  ...props
}) {
  const currentId = useCurrentUserId();
  return /* @__PURE__ */ React__default.createElement(CommentMention$1, {
    className: classNames("lb-comment-mention", className),
    "data-self": userId === currentId ? "" : void 0,
    ...props
  }, MENTION_CHARACTER, /* @__PURE__ */ React__default.createElement(User, {
    userId
  }));
}
function CommentLink({
  href,
  children,
  className,
  ...props
}) {
  return /* @__PURE__ */ React__default.createElement(CommentLink$1, {
    className: classNames("lb-comment-link", className),
    href,
    ...props
  }, children);
}
function CommentNonInteractiveLink({
  href: _href,
  children,
  className,
  ...props
}) {
  return /* @__PURE__ */ React__default.createElement("span", {
    className: classNames("lb-comment-link", className),
    ...props
  }, children);
}
const CommentReactionButton = forwardRef(({ reaction, overrides, className, ...props }, forwardedRef) => {
  const $ = useOverrides(overrides);
  return /* @__PURE__ */ React__default.createElement(Button, {
    className: classNames("lb-comment-reaction", className),
    variant: "outline",
    "aria-label": $.COMMENT_REACTION_DESCRIPTION(
      reaction.emoji,
      reaction.users.length
    ),
    ...props,
    ref: forwardedRef
  }, /* @__PURE__ */ React__default.createElement(Emoji, {
    className: "lb-comment-reaction-emoji",
    emoji: reaction.emoji
  }), /* @__PURE__ */ React__default.createElement("span", {
    className: "lb-comment-reaction-count"
  }, reaction.users.length));
});
const CommentReaction = forwardRef(({ comment, reaction, overrides, disabled, ...props }, forwardedRef) => {
  const addReaction = useAddReaction();
  const removeReaction = useRemoveReaction();
  const currentId = useCurrentUserId();
  const isActive = useMemo(() => {
    return reaction.users.some((users) => users.id === currentId);
  }, [currentId, reaction]);
  const $ = useOverrides(overrides);
  const tooltipContent = useMemo(
    () => /* @__PURE__ */ React__default.createElement("span", null, $.COMMENT_REACTION_LIST(
      /* @__PURE__ */ React__default.createElement(List, {
        values: reaction.users.map((users) => /* @__PURE__ */ React__default.createElement(User, {
          key: users.id,
          userId: users.id,
          replaceSelf: true
        })),
        formatRemaining: $.LIST_REMAINING_USERS,
        truncate: REACTIONS_TRUNCATE,
        locale: $.locale
      }),
      reaction.emoji,
      reaction.users.length
    )),
    [$, reaction]
  );
  const stopPropagation = useCallback((event) => {
    event.stopPropagation();
  }, []);
  const handlePressedChange = useCallback(
    (isPressed) => {
      if (isPressed) {
        addReaction({
          threadId: comment.threadId,
          commentId: comment.id,
          emoji: reaction.emoji
        });
      } else {
        removeReaction({
          threadId: comment.threadId,
          commentId: comment.id,
          emoji: reaction.emoji
        });
      }
    },
    [addReaction, comment.threadId, comment.id, reaction.emoji, removeReaction]
  );
  return /* @__PURE__ */ React__default.createElement(Tooltip, {
    content: tooltipContent,
    multiline: true,
    className: "lb-comment-reaction-tooltip"
  }, /* @__PURE__ */ React__default.createElement(TogglePrimitive.Root, {
    asChild: true,
    pressed: isActive,
    onPressedChange: handlePressedChange,
    onClick: stopPropagation,
    disabled,
    ref: forwardedRef
  }, /* @__PURE__ */ React__default.createElement(CommentReactionButton, {
    "data-self": isActive ? "" : void 0,
    reaction,
    overrides,
    ...props
  })));
});
const CommentNonInteractiveReaction = forwardRef(({ reaction, overrides, ...props }, forwardedRef) => {
  const currentId = useCurrentUserId();
  const isActive = useMemo(() => {
    return reaction.users.some((users) => users.id === currentId);
  }, [currentId, reaction]);
  return /* @__PURE__ */ React__default.createElement(CommentReactionButton, {
    disableable: false,
    "data-self": isActive ? "" : void 0,
    reaction,
    overrides,
    ...props,
    ref: forwardedRef
  });
});
function AutoMarkReadThreadIdHandler({
  threadId,
  commentRef
}) {
  const markThreadAsRead = useMarkThreadAsRead();
  const isWindowFocused = useWindowFocus();
  useVisibleCallback(
    commentRef,
    () => {
      markThreadAsRead(threadId);
    },
    {
      enabled: isWindowFocused
    }
  );
  return null;
}
const Comment = forwardRef(
  ({
    comment,
    indentContent = true,
    showDeleted,
    showActions = "hover",
    showReactions = true,
    onAuthorClick,
    onMentionClick,
    onCommentEdit,
    onCommentDelete,
    overrides,
    className,
    additionalActions,
    additionalActionsClassName,
    autoMarkReadThreadId,
    ...props
  }, forwardedRef) => {
    const isInRoom = Boolean(useContext(RoomContext));
    const ref = useRef(null);
    const mergedRefs = useRefs(forwardedRef, ref);
    const currentUserId = useCurrentUserId();
    const deleteComment = useDeleteComment();
    const editComment = useEditComment();
    const addReaction = useAddReaction();
    const removeReaction = useRemoveReaction();
    const $ = useOverrides(overrides);
    const [isEditing, setEditing] = useState(false);
    const [isTarget, setTarget] = useState(false);
    const [isMoreActionOpen, setMoreActionOpen] = useState(false);
    const [isReactionActionOpen, setReactionActionOpen] = useState(false);
    const stopPropagation = useCallback((event) => {
      event.stopPropagation();
    }, []);
    const handleEdit = useCallback(() => {
      setEditing(true);
    }, []);
    const handleEditCancel = useCallback(
      (event) => {
        event.stopPropagation();
        setEditing(false);
      },
      []
    );
    const handleEditSubmit = useCallback(
      ({ body }, event) => {
        onCommentEdit?.(comment);
        event.preventDefault();
        setEditing(false);
        editComment({
          commentId: comment.id,
          threadId: comment.threadId,
          body
        });
      },
      [comment, editComment, onCommentEdit]
    );
    const handleDelete = useCallback(() => {
      onCommentDelete?.(comment);
      deleteComment({
        commentId: comment.id,
        threadId: comment.threadId
      });
    }, [comment, deleteComment, onCommentDelete]);
    const handleAuthorClick = useCallback(
      (event) => {
        onAuthorClick?.(comment.userId, event);
      },
      [comment.userId, onAuthorClick]
    );
    const handleReactionSelect = useCallback(
      (emoji) => {
        const reactionIndex = comment.reactions.findIndex(
          (reaction) => reaction.emoji === emoji
        );
        if (reactionIndex >= 0 && currentUserId && comment.reactions[reactionIndex].users.some(
          (user) => user.id === currentUserId
        )) {
          removeReaction({
            threadId: comment.threadId,
            commentId: comment.id,
            emoji
          });
        } else {
          addReaction({
            threadId: comment.threadId,
            commentId: comment.id,
            emoji
          });
        }
      },
      [
        addReaction,
        comment.id,
        comment.reactions,
        comment.threadId,
        removeReaction,
        currentUserId
      ]
    );
    useEffect(() => {
      const isWindowDefined = typeof window !== "undefined";
      if (!isWindowDefined)
        return;
      const hash = window.location.hash;
      const commentId = hash.slice(1);
      if (commentId === comment.id) {
        setTarget(true);
      }
    }, []);
    if (!showDeleted && !comment.body) {
      return null;
    }
    return /* @__PURE__ */ React__default.createElement(TooltipProvider, null, isInRoom && autoMarkReadThreadId && /* @__PURE__ */ React__default.createElement(AutoMarkReadThreadIdHandler, {
      commentRef: ref,
      threadId: autoMarkReadThreadId
    }), /* @__PURE__ */ React__default.createElement("div", {
      id: comment.id,
      className: classNames(
        "lb-root lb-comment",
        indentContent && "lb-comment:indent-content",
        showActions === "hover" && "lb-comment:show-actions-hover",
        (isMoreActionOpen || isReactionActionOpen) && "lb-comment:action-open",
        className
      ),
      "data-deleted": !comment.body ? "" : void 0,
      "data-editing": isEditing ? "" : void 0,
      "data-target": isTarget ? "" : void 0,
      dir: $.dir,
      ...props,
      ref: mergedRefs
    }, /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-comment-header"
    }, /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-comment-details"
    }, /* @__PURE__ */ React__default.createElement(Avatar, {
      className: "lb-comment-avatar",
      userId: comment.userId,
      onClick: handleAuthorClick
    }), /* @__PURE__ */ React__default.createElement("span", {
      className: "lb-comment-details-labels"
    }, /* @__PURE__ */ React__default.createElement(User, {
      className: "lb-comment-author",
      userId: comment.userId,
      onClick: handleAuthorClick
    }), /* @__PURE__ */ React__default.createElement("span", {
      className: "lb-comment-date"
    }, /* @__PURE__ */ React__default.createElement(Timestamp, {
      locale: $.locale,
      date: comment.createdAt,
      className: "lb-date lb-comment-date-created"
    }), comment.editedAt && comment.body && /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, " ", /* @__PURE__ */ React__default.createElement("span", {
      className: "lb-comment-date-edited"
    }, $.COMMENT_EDITED))))), showActions && !isEditing && /* @__PURE__ */ React__default.createElement("div", {
      className: classNames(
        "lb-comment-actions",
        additionalActionsClassName
      )
    }, additionalActions ?? null, showReactions && /* @__PURE__ */ React__default.createElement(EmojiPicker, {
      onEmojiSelect: handleReactionSelect,
      onOpenChange: setReactionActionOpen
    }, /* @__PURE__ */ React__default.createElement(Tooltip, {
      content: $.COMMENT_ADD_REACTION
    }, /* @__PURE__ */ React__default.createElement(PopoverTrigger, {
      asChild: true
    }, /* @__PURE__ */ React__default.createElement(Button, {
      className: "lb-comment-action",
      onClick: stopPropagation,
      "aria-label": $.COMMENT_ADD_REACTION
    }, /* @__PURE__ */ React__default.createElement(EmojiAddIcon, {
      className: "lb-button-icon"
    }))))), comment.userId === currentUserId && /* @__PURE__ */ React__default.createElement(Dropdown, {
      open: isMoreActionOpen,
      onOpenChange: setMoreActionOpen,
      align: "end",
      content: /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(DropdownItem, {
        onSelect: handleEdit,
        onClick: stopPropagation
      }, /* @__PURE__ */ React__default.createElement(EditIcon, {
        className: "lb-dropdown-item-icon"
      }), $.COMMENT_EDIT), /* @__PURE__ */ React__default.createElement(DropdownItem, {
        onSelect: handleDelete,
        onClick: stopPropagation
      }, /* @__PURE__ */ React__default.createElement(DeleteIcon, {
        className: "lb-dropdown-item-icon"
      }), $.COMMENT_DELETE))
    }, /* @__PURE__ */ React__default.createElement(Tooltip, {
      content: $.COMMENT_MORE
    }, /* @__PURE__ */ React__default.createElement(DropdownMenuTrigger, {
      asChild: true
    }, /* @__PURE__ */ React__default.createElement(Button, {
      className: "lb-comment-action",
      disabled: !comment.body,
      onClick: stopPropagation,
      "aria-label": $.COMMENT_MORE
    }, /* @__PURE__ */ React__default.createElement(EllipsisIcon, {
      className: "lb-button-icon"
    }))))))), /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-comment-content"
    }, isEditing ? /* @__PURE__ */ React__default.createElement(Composer, {
      className: "lb-comment-composer",
      onComposerSubmit: handleEditSubmit,
      defaultValue: comment.body,
      autoFocus: true,
      showAttribution: false,
      actions: /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(Tooltip, {
        content: $.COMMENT_EDIT_COMPOSER_CANCEL,
        "aria-label": $.COMMENT_EDIT_COMPOSER_CANCEL
      }, /* @__PURE__ */ React__default.createElement(Button, {
        className: "lb-composer-action",
        onClick: handleEditCancel
      }, /* @__PURE__ */ React__default.createElement(CrossIcon, {
        className: "lb-button-icon"
      }))), /* @__PURE__ */ React__default.createElement(ShortcutTooltip, {
        content: $.COMMENT_EDIT_COMPOSER_SAVE,
        shortcut: /* @__PURE__ */ React__default.createElement(ShortcutTooltipKey, {
          name: "enter"
        })
      }, /* @__PURE__ */ React__default.createElement(ComposerSubmit, {
        asChild: true
      }, /* @__PURE__ */ React__default.createElement(Button, {
        variant: "primary",
        className: "lb-composer-action",
        onClick: stopPropagation,
        "aria-label": $.COMMENT_EDIT_COMPOSER_SAVE
      }, /* @__PURE__ */ React__default.createElement(CheckIcon, {
        className: "lb-button-icon"
      }))))),
      overrides: {
        COMPOSER_PLACEHOLDER: $.COMMENT_EDIT_COMPOSER_PLACEHOLDER
      }
    }) : comment.body ? /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(CommentBody, {
      className: "lb-comment-body",
      body: comment.body,
      components: {
        Mention: ({ userId }) => /* @__PURE__ */ React__default.createElement(CommentMention, {
          userId,
          onClick: (event) => onMentionClick?.(userId, event)
        }),
        Link: CommentLink
      }
    }), showReactions && comment.reactions.length > 0 && /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-comment-reactions"
    }, comment.reactions.map((reaction) => /* @__PURE__ */ React__default.createElement(CommentReaction, {
      key: reaction.emoji,
      comment,
      reaction,
      overrides
    })), /* @__PURE__ */ React__default.createElement(EmojiPicker, {
      onEmojiSelect: handleReactionSelect
    }, /* @__PURE__ */ React__default.createElement(Tooltip, {
      content: $.COMMENT_ADD_REACTION
    }, /* @__PURE__ */ React__default.createElement(PopoverTrigger, {
      asChild: true
    }, /* @__PURE__ */ React__default.createElement(Button, {
      className: "lb-comment-reaction lb-comment-reaction-add",
      variant: "outline",
      onClick: stopPropagation,
      "aria-label": $.COMMENT_ADD_REACTION
    }, /* @__PURE__ */ React__default.createElement(EmojiAddIcon, {
      className: "lb-button-icon"
    }))))))) : /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-comment-body"
    }, /* @__PURE__ */ React__default.createElement("p", {
      className: "lb-comment-deleted"
    }, $.COMMENT_DELETED)))));
  }
);

export { Comment, CommentLink, CommentMention, CommentNonInteractiveLink, CommentNonInteractiveReaction, CommentReaction };
//# sourceMappingURL=Comment.mjs.map
