'use client';
import { kInternal } from '@liveblocks/core';
import { useClient, useSelf, useCreateThread, useCreateComment, useEditComment } from '@liveblocks/react';
import React__default, { forwardRef, useMemo, useState, useCallback } from 'react';
import { EmojiIcon } from '../icons/Emoji.mjs';
import { MentionIcon } from '../icons/Mention.mjs';
import { SendIcon } from '../icons/Send.mjs';
import { useOverrides } from '../overrides.mjs';
import { Editor as ComposerEditor, Submit as ComposerSubmit, Form as ComposerForm, Mention as ComposerMention$1, Suggestions as ComposerSuggestions, SuggestionsList as ComposerSuggestionsList, SuggestionsListItem as ComposerSuggestionsListItem, Link as ComposerLink$1 } from '../primitives/Composer/index.mjs';
import { useComposer } from '../primitives/Composer/contexts.mjs';
import { MENTION_CHARACTER } from '../slate/plugins/mentions.mjs';
import { classNames } from '../utils/class-names.mjs';
import { useControllableState } from '../utils/use-controllable-state.mjs';
import { Attribution } from './internal/Attribution.mjs';
import { Avatar } from './internal/Avatar.mjs';
import { Button } from './internal/Button.mjs';
import { EmojiPicker } from './internal/EmojiPicker.mjs';
import { ShortcutTooltip, ShortcutTooltipKey, Tooltip } from './internal/Tooltip.mjs';
import { User } from './internal/User.mjs';
import { TooltipProvider } from '@radix-ui/react-tooltip';
import { PopoverTrigger } from '@radix-ui/react-popover';

function ComposerInsertMentionEditorAction({
  label,
  className,
  onClick,
  ...props
}) {
  const { createMention } = useComposer();
  const preventDefault = useCallback((event) => {
    event.preventDefault();
  }, []);
  const handleClick = useCallback(
    (event) => {
      onClick?.(event);
      if (!event.isDefaultPrevented()) {
        event.stopPropagation();
        createMention();
      }
    },
    [createMention, onClick]
  );
  return /* @__PURE__ */ React__default.createElement(Tooltip, {
    content: label
  }, /* @__PURE__ */ React__default.createElement(Button, {
    className: classNames("lb-composer-editor-action", className),
    onMouseDown: preventDefault,
    onClick: handleClick,
    "aria-label": label,
    ...props
  }, /* @__PURE__ */ React__default.createElement(MentionIcon, {
    className: "lb-button-icon"
  })));
}
function ComposerInsertEmojiEditorAction({
  label,
  onPickerOpenChange,
  className,
  ...props
}) {
  const { insertText } = useComposer();
  const preventDefault = useCallback((event) => {
    event.preventDefault();
  }, []);
  const stopPropagation = useCallback((event) => {
    event.stopPropagation();
  }, []);
  return /* @__PURE__ */ React__default.createElement(EmojiPicker, {
    onEmojiSelect: insertText,
    onOpenChange: onPickerOpenChange
  }, /* @__PURE__ */ React__default.createElement(Tooltip, {
    content: label
  }, /* @__PURE__ */ React__default.createElement(PopoverTrigger, {
    asChild: true
  }, /* @__PURE__ */ React__default.createElement(Button, {
    className: classNames("lb-composer-editor-action", className),
    onMouseDown: preventDefault,
    onClick: stopPropagation,
    "aria-label": label,
    ...props
  }, /* @__PURE__ */ React__default.createElement(EmojiIcon, {
    className: "lb-button-icon"
  })))));
}
function ComposerMention({ userId }) {
  return /* @__PURE__ */ React__default.createElement(ComposerMention$1, {
    className: "lb-composer-mention"
  }, MENTION_CHARACTER, /* @__PURE__ */ React__default.createElement(User, {
    userId
  }));
}
function ComposerMentionSuggestions({
  userIds
}) {
  return userIds.length > 0 ? /* @__PURE__ */ React__default.createElement(ComposerSuggestions, {
    className: "lb-root lb-portal lb-elevation lb-composer-suggestions lb-composer-mention-suggestions"
  }, /* @__PURE__ */ React__default.createElement(ComposerSuggestionsList, {
    className: "lb-composer-suggestions-list lb-composer-mention-suggestions-list"
  }, userIds.map((userId) => /* @__PURE__ */ React__default.createElement(ComposerSuggestionsListItem, {
    key: userId,
    className: "lb-composer-suggestions-list-item lb-composer-mention-suggestion",
    value: userId
  }, /* @__PURE__ */ React__default.createElement(Avatar, {
    userId,
    className: "lb-composer-mention-suggestion-avatar"
  }), /* @__PURE__ */ React__default.createElement(User, {
    userId,
    className: "lb-composer-mention-suggestion-user"
  }))))) : null;
}
function ComposerLink({ href, children }) {
  return /* @__PURE__ */ React__default.createElement(ComposerLink$1, {
    href,
    className: "lb-composer-link"
  }, children);
}
const editorComponents = {
  Mention: ComposerMention,
  MentionSuggestions: ComposerMentionSuggestions,
  Link: ComposerLink
};
const ComposerWithContext = forwardRef(
  ({
    defaultValue,
    disabled,
    autoFocus,
    collapsed: controlledCollapsed,
    defaultCollapsed,
    onCollapsedChange: controlledOnCollapsedChange,
    actions,
    overrides,
    showAttribution,
    onFocus,
    onBlur,
    className,
    ...props
  }, forwardedRef) => {
    const client = useClient();
    const hasResolveMentionSuggestions = client[kInternal].resolveMentionSuggestions !== void 0;
    const self = useSelf();
    const isDisabled = useMemo(
      () => disabled || (self ? !self.canComment : false),
      [disabled, self?.canComment]
    );
    const { isEmpty } = useComposer();
    const $ = useOverrides(overrides);
    const [isEmojiPickerOpen, setEmojiPickerOpen] = useState(false);
    const [collapsed, onCollapsedChange] = useControllableState(
      controlledCollapsed === void 0 && defaultCollapsed === void 0 ? false : controlledCollapsed,
      controlledOnCollapsedChange,
      defaultCollapsed
    );
    const preventDefault = useCallback((event) => {
      event.preventDefault();
    }, []);
    const stopPropagation = useCallback((event) => {
      event.stopPropagation();
    }, []);
    const handleEditorClick = useCallback(
      (event) => {
        event.stopPropagation();
        if (isEmpty) {
          onCollapsedChange?.(false);
        }
      },
      [isEmpty, onCollapsedChange]
    );
    const handleFocus = useCallback(
      (event) => {
        onFocus?.(event);
        if (event.isDefaultPrevented()) {
          return;
        }
        if (isEmpty) {
          onCollapsedChange?.(false);
        }
      },
      [isEmpty, onCollapsedChange, onFocus]
    );
    const handleBlur = useCallback(
      (event) => {
        onBlur?.(event);
        if (event.isDefaultPrevented()) {
          return;
        }
        const isOutside = !event.currentTarget.contains(event.relatedTarget);
        if (isOutside && isEmpty && !isEmojiPickerOpen) {
          onCollapsedChange?.(true);
        }
      },
      [isEmojiPickerOpen, isEmpty, onBlur, onCollapsedChange]
    );
    return /* @__PURE__ */ React__default.createElement("form", {
      className: classNames(
        "lb-root lb-composer lb-composer-form",
        className
      ),
      dir: $.dir,
      ...props,
      ref: forwardedRef,
      "data-collapsed": collapsed ? "" : void 0,
      onFocus: handleFocus,
      onBlur: handleBlur
    }, /* @__PURE__ */ React__default.createElement(ComposerEditor, {
      className: "lb-composer-editor",
      onClick: handleEditorClick,
      placeholder: $.COMPOSER_PLACEHOLDER,
      defaultValue,
      disabled: isDisabled,
      autoFocus,
      components: editorComponents,
      dir: $.dir
    }), !collapsed && /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-composer-footer"
    }, /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-composer-editor-actions"
    }, hasResolveMentionSuggestions && /* @__PURE__ */ React__default.createElement(ComposerInsertMentionEditorAction, {
      label: $.COMPOSER_INSERT_MENTION,
      disabled: isDisabled
    }), /* @__PURE__ */ React__default.createElement(ComposerInsertEmojiEditorAction, {
      label: $.COMPOSER_INSERT_EMOJI,
      onPickerOpenChange: setEmojiPickerOpen,
      disabled: isDisabled
    })), showAttribution && /* @__PURE__ */ React__default.createElement(Attribution, null), /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-composer-actions"
    }, actions ?? /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(ShortcutTooltip, {
      content: $.COMPOSER_SEND,
      shortcut: /* @__PURE__ */ React__default.createElement(ShortcutTooltipKey, {
        name: "enter"
      })
    }, /* @__PURE__ */ React__default.createElement(ComposerSubmit, {
      disabled: isDisabled,
      asChild: true
    }, /* @__PURE__ */ React__default.createElement(Button, {
      onMouseDown: preventDefault,
      onClick: stopPropagation,
      className: "lb-composer-action",
      variant: "primary",
      "aria-label": $.COMPOSER_SEND
    }, /* @__PURE__ */ React__default.createElement(SendIcon, null))))))));
  }
);
const Composer = forwardRef(
  ({
    threadId,
    commentId,
    metadata,
    onComposerSubmit,
    onFocus,
    ...props
  }, forwardedRef) => {
    const createThread = useCreateThread();
    const createComment = useCreateComment();
    const editComment = useEditComment();
    const handleCommentSubmit = useCallback(
      (comment, event) => {
        onComposerSubmit?.(comment, event);
        if (event.isDefaultPrevented()) {
          return;
        }
        if (commentId && threadId) {
          editComment({
            commentId,
            threadId,
            body: comment.body
          });
        } else if (threadId) {
          createComment({
            threadId,
            body: comment.body
          });
        } else {
          createThread({
            body: comment.body,
            metadata: metadata ?? {}
          });
        }
      },
      [
        commentId,
        createComment,
        createThread,
        editComment,
        metadata,
        onComposerSubmit,
        threadId
      ]
    );
    return /* @__PURE__ */ React__default.createElement(TooltipProvider, null, /* @__PURE__ */ React__default.createElement(ComposerForm, {
      onComposerSubmit: handleCommentSubmit,
      onFocus,
      asChild: true
    }, /* @__PURE__ */ React__default.createElement(ComposerWithContext, {
      ...props,
      ref: forwardedRef
    })));
  }
);

export { Composer };
//# sourceMappingURL=Composer.mjs.map
