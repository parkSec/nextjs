import { LexicalComposer } from '@lexical/react/LexicalComposer';
import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';
import { ContentEditable } from '@lexical/react/LexicalContentEditable';
import { EditorRefPlugin } from '@lexical/react/LexicalEditorRefPlugin';
import { LexicalErrorBoundary } from '@lexical/react/LexicalErrorBoundary';
import { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';
import { syncLexicalUpdateToYjs, syncYjsChangesToLexical, createBinding } from '@lexical/yjs';
import { useHistoryVersionData } from '@liveblocks/react';
import { useOverrides } from '@liveblocks/react-ui';
import { SpinnerIcon, List, User, Button, RestoreIcon } from '@liveblocks/react-ui/_private';
import React__default, { forwardRef, useRef, useMemo, useEffect, useCallback } from 'react';
import { Doc, applyUpdate } from 'yjs';
import { classNames } from '../classnames.mjs';
import { liveblocksConfig } from '../liveblocks-config.mjs';

const AUTHORS_TRUNCATE = 3;
function createNoOpProvider() {
  const emptyFunction = () => {
  };
  return {
    awareness: {
      getLocalState: () => null,
      getStates: () => /* @__PURE__ */ new Map(),
      off: emptyFunction,
      on: emptyFunction,
      setLocalState: emptyFunction
    },
    connect: emptyFunction,
    disconnect: emptyFunction,
    off: emptyFunction,
    on: emptyFunction
  };
}
function registerCollaborationListeners(editor, provider, binding) {
  const unsubscribeUpdateListener = editor.registerUpdateListener(
    ({
      dirtyElements,
      dirtyLeaves,
      editorState,
      normalizedNodes,
      prevEditorState,
      tags
    }) => {
      if (tags.has("skip-collab") === false) {
        syncLexicalUpdateToYjs(
          binding,
          provider,
          prevEditorState,
          editorState,
          dirtyElements,
          dirtyLeaves,
          normalizedNodes,
          tags
        );
      }
    }
  );
  const observer = (events, transaction) => {
    if (transaction.origin !== binding) {
      syncYjsChangesToLexical(binding, provider, events, false);
    }
  };
  binding.root.getSharedType().observeDeep(observer);
  return () => {
    unsubscribeUpdateListener();
    binding.root.getSharedType().unobserveDeep(observer);
  };
}
const HistoryVersionPreview = forwardRef(({ version, onVersionRestore, className, ...props }, forwardedRef) => {
  const [parentEditor, parentContext] = useLexicalComposerContext();
  const editor = useRef();
  const $ = useOverrides();
  const { isLoading, data, error } = useHistoryVersionData(version.id);
  const initialConfig = useMemo(() => {
    const nodes = Array.from(parentEditor._nodes.values()).map((n) => n.klass);
    return liveblocksConfig({
      namespace: "VersionPreview",
      theme: parentContext.getTheme() || {},
      nodes,
      editable: false,
      onError: (err) => console.error(err)
    });
  }, [parentEditor, parentContext]);
  useEffect(() => {
    if (error || !data || !editor.current || !data.length) {
      return;
    }
    const doc = new Doc();
    const docMap = /* @__PURE__ */ new Map([[version.id, doc]]);
    const provider = createNoOpProvider();
    const binding = createBinding(
      editor.current,
      provider,
      version.id,
      doc,
      docMap
    );
    const unsubscribe = registerCollaborationListeners(
      editor.current,
      provider,
      binding
    );
    try {
      applyUpdate(doc, data);
    } catch (err) {
      console.warn(err);
    }
    return unsubscribe;
  }, [data, version.id, isLoading, error]);
  const restore = useCallback(() => {
    if (!editor.current || !parentEditor) {
      return;
    }
    parentEditor.setEditorState(editor.current.getEditorState());
    onVersionRestore?.(version);
  }, [parentEditor, onVersionRestore, version]);
  return /* @__PURE__ */ React__default.createElement("div", {
    ...props,
    className: classNames(
      "lb-root lb-history-version-preview lb-lexical-version-preview",
      className
    ),
    ref: forwardedRef
  }, isLoading ? /* @__PURE__ */ React__default.createElement("div", {
    className: "lb-loading lb-history-version-preview-loading"
  }, /* @__PURE__ */ React__default.createElement(SpinnerIcon, null)) : error ? /* @__PURE__ */ React__default.createElement("div", {
    className: "lb-error lb-history-version-preview-error"
  }, $.HISTORY_VERSION_PREVIEW_ERROR(error)) : /* @__PURE__ */ React__default.createElement("div", {
    className: "lb-history-version-preview-content lb-lexical-editor-container lb-lexical-version-preview-editor-container"
  }, /* @__PURE__ */ React__default.createElement(LexicalComposer, {
    initialConfig
  }, /* @__PURE__ */ React__default.createElement(EditorRefPlugin, {
    editorRef: editor
  }), /* @__PURE__ */ React__default.createElement(RichTextPlugin, {
    contentEditable: /* @__PURE__ */ React__default.createElement(ContentEditable, null),
    placeholder: /* @__PURE__ */ React__default.createElement("div", {
      className: "lb-empty lb-history-version-preview-empty"
    }, $.HISTORY_VERSION_PREVIEW_EMPTY),
    ErrorBoundary: LexicalErrorBoundary
  }))), /* @__PURE__ */ React__default.createElement("div", {
    className: "lb-history-version-preview-footer"
  }, /* @__PURE__ */ React__default.createElement("span", {
    className: "lb-history-version-preview-authors"
  }, $.HISTORY_VERSION_PREVIEW_AUTHORS_LIST(
    /* @__PURE__ */ React__default.createElement(List, {
      values: version.authors.map((author) => /* @__PURE__ */ React__default.createElement(User, {
        key: author.id,
        userId: author.id,
        replaceSelf: true
      })),
      formatRemaining: $.LIST_REMAINING_USERS,
      truncate: AUTHORS_TRUNCATE,
      locale: $.locale
    })
  )), /* @__PURE__ */ React__default.createElement("div", {
    className: "lb-history-version-preview-actions"
  }, /* @__PURE__ */ React__default.createElement(Button, {
    onClick: restore,
    disabled: !data || !parentEditor,
    variant: "primary",
    size: "large",
    className: "lb-history-version-preview-action"
  }, /* @__PURE__ */ React__default.createElement(RestoreIcon, {
    className: "lb-button-icon"
  }), /* @__PURE__ */ React__default.createElement("span", {
    className: "lb-button-label"
  }, $.HISTORY_VERSION_PREVIEW_RESTORE)))));
});

export { HistoryVersionPreview };
//# sourceMappingURL=history-version-preview.mjs.map
