'use strict';

var LexicalComposer = require('@lexical/react/LexicalComposer');
var LexicalComposerContext = require('@lexical/react/LexicalComposerContext');
var LexicalContentEditable = require('@lexical/react/LexicalContentEditable');
var LexicalEditorRefPlugin = require('@lexical/react/LexicalEditorRefPlugin');
var LexicalErrorBoundary = require('@lexical/react/LexicalErrorBoundary');
var LexicalRichTextPlugin = require('@lexical/react/LexicalRichTextPlugin');
var yjs = require('@lexical/yjs');
var react = require('@liveblocks/react');
var reactUi = require('@liveblocks/react-ui');
var _private = require('@liveblocks/react-ui/_private');
var React = require('react');
var yjs$1 = require('yjs');
var classnames = require('../classnames.js');
var liveblocksConfig = require('../liveblocks-config.js');

const AUTHORS_TRUNCATE = 3;
function createNoOpProvider() {
  const emptyFunction = () => {
  };
  return {
    awareness: {
      getLocalState: () => null,
      getStates: () => /* @__PURE__ */ new Map(),
      off: emptyFunction,
      on: emptyFunction,
      setLocalState: emptyFunction
    },
    connect: emptyFunction,
    disconnect: emptyFunction,
    off: emptyFunction,
    on: emptyFunction
  };
}
function registerCollaborationListeners(editor, provider, binding) {
  const unsubscribeUpdateListener = editor.registerUpdateListener(
    ({
      dirtyElements,
      dirtyLeaves,
      editorState,
      normalizedNodes,
      prevEditorState,
      tags
    }) => {
      if (tags.has("skip-collab") === false) {
        yjs.syncLexicalUpdateToYjs(
          binding,
          provider,
          prevEditorState,
          editorState,
          dirtyElements,
          dirtyLeaves,
          normalizedNodes,
          tags
        );
      }
    }
  );
  const observer = (events, transaction) => {
    if (transaction.origin !== binding) {
      yjs.syncYjsChangesToLexical(binding, provider, events, false);
    }
  };
  binding.root.getSharedType().observeDeep(observer);
  return () => {
    unsubscribeUpdateListener();
    binding.root.getSharedType().unobserveDeep(observer);
  };
}
const HistoryVersionPreview = React.forwardRef(({ version, onVersionRestore, className, ...props }, forwardedRef) => {
  const [parentEditor, parentContext] = LexicalComposerContext.useLexicalComposerContext();
  const editor = React.useRef();
  const $ = reactUi.useOverrides();
  const { isLoading, data, error } = react.useHistoryVersionData(version.id);
  const initialConfig = React.useMemo(() => {
    const nodes = Array.from(parentEditor._nodes.values()).map((n) => n.klass);
    return liveblocksConfig.liveblocksConfig({
      namespace: "VersionPreview",
      theme: parentContext.getTheme() || {},
      nodes,
      editable: false,
      onError: (err) => console.error(err)
    });
  }, [parentEditor, parentContext]);
  React.useEffect(() => {
    if (error || !data || !editor.current || !data.length) {
      return;
    }
    const doc = new yjs$1.Doc();
    const docMap = /* @__PURE__ */ new Map([[version.id, doc]]);
    const provider = createNoOpProvider();
    const binding = yjs.createBinding(
      editor.current,
      provider,
      version.id,
      doc,
      docMap
    );
    const unsubscribe = registerCollaborationListeners(
      editor.current,
      provider,
      binding
    );
    try {
      yjs$1.applyUpdate(doc, data);
    } catch (err) {
      console.warn(err);
    }
    return unsubscribe;
  }, [data, version.id, isLoading, error]);
  const restore = React.useCallback(() => {
    if (!editor.current || !parentEditor) {
      return;
    }
    parentEditor.setEditorState(editor.current.getEditorState());
    onVersionRestore?.(version);
  }, [parentEditor, onVersionRestore, version]);
  return /* @__PURE__ */ React.createElement("div", {
    ...props,
    className: classnames.classNames(
      "lb-root lb-history-version-preview lb-lexical-version-preview",
      className
    ),
    ref: forwardedRef
  }, isLoading ? /* @__PURE__ */ React.createElement("div", {
    className: "lb-loading lb-history-version-preview-loading"
  }, /* @__PURE__ */ React.createElement(_private.SpinnerIcon, null)) : error ? /* @__PURE__ */ React.createElement("div", {
    className: "lb-error lb-history-version-preview-error"
  }, $.HISTORY_VERSION_PREVIEW_ERROR(error)) : /* @__PURE__ */ React.createElement("div", {
    className: "lb-history-version-preview-content lb-lexical-editor-container lb-lexical-version-preview-editor-container"
  }, /* @__PURE__ */ React.createElement(LexicalComposer.LexicalComposer, {
    initialConfig
  }, /* @__PURE__ */ React.createElement(LexicalEditorRefPlugin.EditorRefPlugin, {
    editorRef: editor
  }), /* @__PURE__ */ React.createElement(LexicalRichTextPlugin.RichTextPlugin, {
    contentEditable: /* @__PURE__ */ React.createElement(LexicalContentEditable.ContentEditable, null),
    placeholder: /* @__PURE__ */ React.createElement("div", {
      className: "lb-empty lb-history-version-preview-empty"
    }, $.HISTORY_VERSION_PREVIEW_EMPTY),
    ErrorBoundary: LexicalErrorBoundary.LexicalErrorBoundary
  }))), /* @__PURE__ */ React.createElement("div", {
    className: "lb-history-version-preview-footer"
  }, /* @__PURE__ */ React.createElement("span", {
    className: "lb-history-version-preview-authors"
  }, $.HISTORY_VERSION_PREVIEW_AUTHORS_LIST(
    /* @__PURE__ */ React.createElement(_private.List, {
      values: version.authors.map((author) => /* @__PURE__ */ React.createElement(_private.User, {
        key: author.id,
        userId: author.id,
        replaceSelf: true
      })),
      formatRemaining: $.LIST_REMAINING_USERS,
      truncate: AUTHORS_TRUNCATE,
      locale: $.locale
    })
  )), /* @__PURE__ */ React.createElement("div", {
    className: "lb-history-version-preview-actions"
  }, /* @__PURE__ */ React.createElement(_private.Button, {
    onClick: restore,
    disabled: !data || !parentEditor,
    variant: "primary",
    size: "large",
    className: "lb-history-version-preview-action"
  }, /* @__PURE__ */ React.createElement(_private.RestoreIcon, {
    className: "lb-button-icon"
  }), /* @__PURE__ */ React.createElement("span", {
    className: "lb-button-label"
  }, $.HISTORY_VERSION_PREVIEW_RESTORE)))));
});

exports.HistoryVersionPreview = HistoryVersionPreview;
//# sourceMappingURL=history-version-preview.js.map
