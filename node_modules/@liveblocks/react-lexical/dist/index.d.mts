import { BaseMetadata, DM, ThreadData, HistoryVersion } from '@liveblocks/core';
import { ThreadProps, ComposerProps } from '@liveblocks/react-ui';
import React, { ComponentPropsWithoutRef, ComponentType, HTMLAttributes } from 'react';
import * as lexical from 'lexical';
import { LexicalCommand } from 'lexical';
import { InitialConfigType } from '@lexical/react/LexicalComposer';

declare type AnchoredThreadsComponents = {
    Thread: ComponentType<ThreadProps>;
};
interface AnchoredThreadsProps<M extends BaseMetadata = DM> extends Omit<ComponentPropsWithoutRef<"div">, "children"> {
    /**
     * The threads to display.
     */
    threads: ThreadData<M>[];
    /**
     * Override the component's components.
     */
    components?: Partial<AnchoredThreadsComponents>;
}
declare function AnchoredThreads({ threads, components, className, style, ...props }: AnchoredThreadsProps): React.JSX.Element | null;

/**
 * Returns whether the associated thread annotation for the given thread id is selected or not in the editor.
 * @param threadId The id of the thread to check if the associated annotation is selected or not.
 * @returns true if the associated annotation for the thread is selected, false otherwise.
 */
declare function useIsThreadActive(threadId: string): boolean;

/**
 * Dispatching OPEN_FLOATING_COMPOSER_COMMAND will display the FloatingComposer
 *
 * @example
 * import { useLexicalComposerContext } from "@lexical/react/LexicalComposerContext";
 * import { OPEN_FLOATING_COMPOSER_COMMAND } from "@liveblocks/react-lexical";
 *
 * function Toolbar() {
 *   const [editor] = useLexicalComposerContext();
 *
 *   return (
 *     <button
 *       onClick={() => {
 *         editor.dispatchCommand(OPEN_FLOATING_COMPOSER_COMMAND);
 *       }}
 *     >
 *       ðŸ’¬ New comment
 *     </button>
 *   );
 * }
 */
declare const OPEN_FLOATING_COMPOSER_COMMAND: LexicalCommand<void>;
declare type FloatingComposerProps<M extends BaseMetadata = DM> = Omit<ComposerProps<M>, "threadId" | "commentId">;
/**
 * Displays a `Composer` near the current lexical selection.
 *
 * To open it, dispatch `OPEN_FLOATING_COMPOSER_COMMAND`.
 *
 * Submitting a comment will attach an annotation thread at the current selection.
 * Should be nested inside `LiveblocksPlugin`.
 */
declare const FloatingComposer: React.ForwardRefExoticComponent<FloatingComposerProps<BaseMetadata> & React.RefAttributes<HTMLFormElement>>;

declare type ThreadPanelComponents = {
    Thread: ComponentType<ThreadProps>;
};
interface FloatingThreadsProps<M extends BaseMetadata = DM> extends Omit<HTMLAttributes<HTMLDivElement>, "children"> {
    /**
     * The threads to display.
     */
    threads: ThreadData<M>[];
    /**
     * Override the component's components.
     */
    components?: Partial<ThreadPanelComponents>;
}
declare function FloatingThreads({ threads, components, ...props }: FloatingThreadsProps): React.JSX.Element | null;

/**
 * Function that takes a Lexical editor config and modifies it to add the necessary
 * `nodes` and `theme` to make `LiveblocksPlugin` works correctly.
 *
 * @example
 * import { LexicalComposer } from "@lexical/react/LexicalComposer";
 * import { RichTextPlugin } from "@lexical/react/LexicalRichTextPlugin";
 * import { ContentEditable } from "@lexical/react/LexicalContentEditable";
 * import { LexicalErrorBoundary } from "@lexical/react/LexicalErrorBoundary";
 * import { liveblocksConfig, LiveblocksPlugin } from "@liveblocks/react-lexical";
 *
 * const initialConfig = liveblocksConfig({
 *   namespace: "MyEditor",
 *   theme: {},
 *   nodes: [],
 *   onError: (err) => console.error(err),
 * });
 *
 * function Editor() {
 *   return (
 *     <LexicalComposer initialConfig={initialConfig}>
 *       <LiveblocksPlugin />
 *       <RichTextPlugin
 *         contentEditable={<ContentEditable />}
 *         placeholder={<div>Enter some text...</div>}
 *         ErrorBoundary={LexicalErrorBoundary}
 *       />
 *     </LexicalComposer>
 *   );
 * }
 */
declare function liveblocksConfig(editorConfig: Omit<InitialConfigType, "editorState">): {
    nodes: (lexical.KlassConstructor<typeof lexical.LexicalNode> | lexical.LexicalNodeReplacement)[];
    editorState: null;
    html?: lexical.HTMLConfig | undefined;
    onError: (error: Error, editor: lexical.LexicalEditor) => void;
    editor__DEPRECATED?: lexical.LexicalEditor | null | undefined;
    namespace: string;
    editable?: boolean | undefined;
    theme?: lexical.EditorThemeClasses | undefined;
};

declare type EditorStatus = "not-loaded" | "loading"
/**
 * Not working yet! Will be available in a future release.
 * Some editor state modifications has not been acknowledged yet by the server
 */
 | "synchronizing" | "synchronized";
/**
 * Get the storage status.
 *
 * - `not-loaded`: Initial state when entering the room.
 * - `loading`: Once the editor state has been requested by LiveblocksPlugin.
 * - `synchronizing`: Not working yet! Will be available in a future release.
 * - `synchronized`:  The editor state is sync with Liveblocks servers.
 */
declare function useEditorStatus(): EditorStatus;
declare type LiveblocksPluginProps = {
    children?: React.ReactNode;
};
/**
 * Liveblocks plugin for Lexical that adds collaboration to your editor.
 *
 * `LiveblocksPlugin` should always be nested inside `LexicalComposer`.
 *
 * @example
 *
 * import { LexicalComposer } from "@lexical/react/LexicalComposer";
 * import { RichTextPlugin } from "@lexical/react/LexicalRichTextPlugin";
 * import { ContentEditable } from "@lexical/react/LexicalContentEditable";
 * import { LexicalErrorBoundary } from "@lexical/react/LexicalErrorBoundary";
 * import { liveblocksConfig, LiveblocksPlugin } from "@liveblocks/react-lexical";
 *
 * const initialConfig = liveblocksConfig({
 *   namespace: "MyEditor",
 *   theme: {},
 *   nodes: [],
 *   onError: (err) => console.error(err),
 * });
 *
 * function Editor() {
 *   return (
 *     <LexicalComposer initialConfig={initialConfig}>
 *       <LiveblocksPlugin />
 *       <RichTextPlugin
 *         contentEditable={<ContentEditable />}
 *         placeholder={<div>Enter some text...</div>}
 *         ErrorBoundary={LexicalErrorBoundary}
 *       />
 *     </LexicalComposer>
 *   );
 * }
 */
declare const LiveblocksPlugin: ({ children, }: LiveblocksPluginProps) => JSX.Element;

interface HistoryVersionPreviewProps extends ComponentPropsWithoutRef<"div"> {
    version: HistoryVersion;
    onVersionRestore?: (version: HistoryVersion) => void;
}
/**
 * Displays a specific version of the current Lexical document.
 *
 * @example
 * <HistoryVersionPreview version={version} />
 */
declare const HistoryVersionPreview: React.ForwardRefExoticComponent<HistoryVersionPreviewProps & React.RefAttributes<HTMLDivElement>>;

export { AnchoredThreads, AnchoredThreadsProps, FloatingComposer, FloatingComposerProps, FloatingThreads, FloatingThreadsProps, HistoryVersionPreview, HistoryVersionPreviewProps, LiveblocksPlugin, OPEN_FLOATING_COMPOSER_COMMAND, liveblocksConfig, useEditorStatus, useIsThreadActive };
