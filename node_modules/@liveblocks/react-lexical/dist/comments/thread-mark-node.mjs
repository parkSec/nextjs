import { ElementNode, $isRangeSelection, $applyNodeReplacement } from 'lexical';

class ThreadMarkNode extends ElementNode {
  constructor(ids, key) {
    super(key);
    this.__ids = ids || [];
  }
  static getType() {
    return "lb-thread-mark";
  }
  static clone(node) {
    return new ThreadMarkNode(Array.from(node.__ids), node.__key);
  }
  static importDOM() {
    return null;
  }
  static importJSON(serializedNode) {
    const node = $createThreadMarkNode(serializedNode.ids);
    node.setFormat(serializedNode.format);
    node.setIndent(serializedNode.indent);
    node.setDirection(serializedNode.direction);
    return node;
  }
  exportJSON() {
    return {
      ...super.exportJSON(),
      ids: this.getIDs(),
      type: "lb-thread-mark",
      version: 1
    };
  }
  createDOM() {
    const element = document.createElement("span");
    return element;
  }
  updateDOM() {
    return false;
  }
  hasID(id) {
    const ids = this.getIDs();
    for (let i = 0; i < ids.length; i++) {
      if (id === ids[i]) {
        return true;
      }
    }
    return false;
  }
  getIDs() {
    const self = this.getLatest();
    return $isThreadMarkNode(self) ? self.__ids : [];
  }
  addID(id) {
    const self = this.getWritable();
    if ($isThreadMarkNode(self)) {
      const ids = self.__ids;
      self.__ids = ids;
      for (let i = 0; i < ids.length; i++) {
        if (id === ids[i]) {
          return;
        }
      }
      ids.push(id);
    }
  }
  deleteID(id) {
    const self = this.getWritable();
    if ($isThreadMarkNode(self)) {
      const ids = self.__ids;
      self.__ids = ids;
      for (let i = 0; i < ids.length; i++) {
        if (id === ids[i]) {
          ids.splice(i, 1);
          return;
        }
      }
    }
  }
  insertNewAfter(_, restoreSelection = true) {
    const markNode = $createThreadMarkNode(this.__ids);
    this.insertAfter(markNode, restoreSelection);
    return markNode;
  }
  canInsertTextBefore() {
    return false;
  }
  canInsertTextAfter() {
    return false;
  }
  canBeEmpty() {
    return false;
  }
  isInline() {
    return true;
  }
  extractWithChild(_, selection, destination) {
    if (!$isRangeSelection(selection) || destination === "html") {
      return false;
    }
    const anchor = selection.anchor;
    const focus = selection.focus;
    const anchorNode = anchor.getNode();
    const focusNode = focus.getNode();
    const isBackward = selection.isBackward();
    const selectionLength = isBackward ? anchor.offset - focus.offset : focus.offset - anchor.offset;
    return this.isParentOf(anchorNode) && this.isParentOf(focusNode) && this.getTextContent().length === selectionLength;
  }
  excludeFromCopy(destination) {
    return destination !== "clone";
  }
}
function $createThreadMarkNode(ids) {
  return $applyNodeReplacement(new ThreadMarkNode(ids));
}
function $isThreadMarkNode(node) {
  return node instanceof ThreadMarkNode;
}

export { $createThreadMarkNode, $isThreadMarkNode, ThreadMarkNode };
//# sourceMappingURL=thread-mark-node.mjs.map
