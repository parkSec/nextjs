import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';
import { $createNodeSelection, $setSelection, $getNodeByKey } from 'lexical';
import React__default, { useCallback } from 'react';
import { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';

function Mention({
  nodeKey,
  children
}) {
  const [editor] = useLexicalComposerContext();
  const isSelected = useIsNodeSelected(nodeKey);
  function handleClick(event) {
    editor.update(() => {
      event.stopPropagation();
      event.preventDefault();
      const selection = $createNodeSelection();
      selection.add(nodeKey);
      $setSelection(selection);
    });
  }
  return /* @__PURE__ */ React__default.createElement("span", {
    onClick: handleClick,
    "data-selected": isSelected ? "" : void 0,
    className: "lb-root lb-lexical-mention"
  }, children);
}
function $isNodeSelected(key) {
  const node = $getNodeByKey(key);
  if (node === null)
    return false;
  return node.isSelected();
}
function useIsNodeSelected(key) {
  const [editor] = useLexicalComposerContext();
  const subscribe = useCallback(
    (onStoreChange) => {
      return editor.registerUpdateListener(onStoreChange);
    },
    [editor]
  );
  const getSnapshot = useCallback(() => {
    return editor.getEditorState().read(() => $isNodeSelected(key));
  }, [editor, key]);
  return useSyncExternalStore(subscribe, getSnapshot, getSnapshot);
}

export { Mention };
//# sourceMappingURL=mention-component.mjs.map
