'use strict';

var core = require('@liveblocks/core');
var lexical = require('lexical');
var React = require('react');
var mentionComponent = require('./mention-component.js');
var user = require('./user.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const MENTION_CHARACTER = "@";
class MentionNode extends lexical.DecoratorNode {
  constructor(id, userId, key) {
    super(key);
    this.__id = id;
    this.__userId = userId;
  }
  static getType() {
    return "lb-mention";
  }
  static clone(node) {
    return new MentionNode(node.__id, node.__userId);
  }
  createDOM() {
    const element = document.createElement("span");
    element.style.display = "inline-block";
    element.style.userSelect = "none";
    return element;
  }
  updateDOM() {
    return false;
  }
  static importDom() {
    return {
      span: () => ({
        conversion: (element) => {
          const value = atob(element.getAttribute("data-lexical-lb-mention"));
          const node = $createMentionNode(value);
          return { node };
        },
        priority: 1
      })
    };
  }
  exportDOM() {
    const element = document.createElement("span");
    const value = this.getTextContent();
    element.setAttribute("data-lexical-lb-mention", btoa(value));
    element.textContent = this.getTextContent();
    return { element };
  }
  static importJSON(serializedNode) {
    const node = $createMentionNode(serializedNode.userId);
    return node;
  }
  exportJSON() {
    return {
      userId: this.__userId,
      type: "lb-mention",
      version: 1
    };
  }
  getUserId() {
    const self = this.getLatest();
    return self.__userId;
  }
  getId() {
    const self = this.getLatest();
    return self.__id;
  }
  decorate() {
    return /* @__PURE__ */ React__namespace.createElement(mentionComponent.Mention, {
      nodeKey: this.getKey()
    }, MENTION_CHARACTER, /* @__PURE__ */ React__namespace.createElement(user.User, {
      userId: this.getUserId()
    }));
  }
}
function $isMentionNode(node) {
  return node instanceof MentionNode;
}
function $createMentionNode(userId) {
  const node = new MentionNode(core.createInboxNotificationId(), userId);
  return lexical.$applyNodeReplacement(node);
}

exports.$createMentionNode = $createMentionNode;
exports.$isMentionNode = $isMentionNode;
exports.MentionNode = MentionNode;
//# sourceMappingURL=mention-node.js.map
